{
    "biotoperate.PlasmaEvaluate.time_field_magnitude": {
        "code": "class PlasmaEvaluate:\n    def time_field_magnitude(self):\n        \"\"\"Time computation of radial field.\"\"\"\n        return self.coilset.plasmagrid.bn\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.plasmagrid.svd_rank = 75\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaEvaluate.time_field_magnitude",
        "number": 5000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "418d7a2a5425a3f1ab4e758cb19f218ac5a8f5878bd58c0e5d83402a9bbc3450",
        "warmup_time": -1
    },
    "biotoperate.PlasmaEvaluate.time_flux_function": {
        "code": "class PlasmaEvaluate:\n    def time_flux_function(self):\n        \"\"\"Time computation of radial field.\"\"\"\n        return self.coilset.plasmagrid.psi\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.plasmagrid.svd_rank = 75\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaEvaluate.time_flux_function",
        "number": 5000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "60ee0c2f9c8fb9c34fc499780216bf157f77b69d3fe8b44ba592f854814b561f",
        "warmup_time": -1
    },
    "biotoperate.PlasmaEvaluate.time_flux_function_ev_only": {
        "code": "class PlasmaEvaluate:\n    def time_flux_function_ev_only(self):\n        \"\"\"Time forced evaluation of flux function.\"\"\"\n        self.coilset.plasmagrid.operator['Psi'].evaluate()\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.plasmagrid.svd_rank = 75\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaEvaluate.time_flux_function_ev_only",
        "number": 5000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a446a8e82741583c687bfc5768c62fe00814b221e3fae8227e89d5660cd5f8ff",
        "warmup_time": -1
    },
    "biotoperate.PlasmaEvaluate.time_radial_field": {
        "code": "class PlasmaEvaluate:\n    def time_radial_field(self):\n        \"\"\"Time computation of radial field.\"\"\"\n        return self.coilset.plasmagrid.br\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.plasmagrid.svd_rank = 75\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaEvaluate.time_radial_field",
        "number": 5000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ecc0d850abb92b8638c08b7612e46f8bf3ee357f60a78e68dca550607f5f5d27",
        "warmup_time": -1
    },
    "biotoperate.PlasmaOperate.time_load_operators": {
        "code": "class PlasmaOperate:\n    def time_load_operators(self):\n        \"\"\"Time biot operator reload.\"\"\"\n        self.coilset.plasmagrid.load_operators()\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.plasmagrid.svd_rank = 75\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaOperate.time_load_operators",
        "number": 100,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d898d321f6aaffbb8f5fe31e420d5dc6a7cc2d51b39833367815f54e7a56b59d",
        "warmup_time": -1
    },
    "biotoperate.PlasmaOperate.time_solve": {
        "code": "class PlasmaOperate:\n    def time_solve(self):\n        \"\"\"Time plasma grid biot solution.\"\"\"\n        self.coilset.plasmagrid.solve()\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.plasmagrid.svd_rank = 75\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaOperate.time_solve",
        "number": 10,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0bf6ef2a28401fe3876de8eca2c311f22179d76bcabf360a250af420d7e8ec4a",
        "warmup_time": -1
    },
    "biotoperate.PlasmaTurns.time_update_turns": {
        "code": "class PlasmaTurns:\n    def time_update_turns(self, svd_rank):\n        \"\"\"Time generation of plasma grid.\"\"\"\n        self.coilset.plasmagrid.update_turns('Psi', svd_rank != -1)\n\n    def setup(self, svd_rank):\n        \"\"\"Load coilset from file and set svd rank.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n        self.coilset.plasmagrid.svd_rank = svd_rank\n\nclass PlasmaGrid:\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.plasmagrid.svd_rank = 75\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaTurns.time_update_turns",
        "number": 5000,
        "param_names": [
            "svd_rank"
        ],
        "params": [
            [
                "10",
                "75",
                "200",
                "500",
                "-1"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cfb7da0986ab1f653e38322b6f4b7b591c1cd15c92349febd9bfaf0cbdca0297",
        "warmup_time": -1
    },
    "framesetloc.GetSubFrameLoc.time_item": {
        "code": "class GetSubFrameLoc:\n    def time_item(self, attr, indexer):\n        \"\"\"Time attribute access.\"\"\"\n        return self.indexer[attr]\n\nclass SubFrameLoc:\n    def setup(self, attr, indexer):\n        \"\"\"Load coilset and set indexer.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n        if 'a' in indexer and attr not in self.coilset.array:\n            raise NotImplementedError\n        if 's' in indexer and attr not in self.coilset.subspace:\n            raise NotImplementedError\n        self.indexer = getattr(self.coilset, indexer)\n        self.data = np.arange(len(self.indexer[attr]))\n        self.plasma_index = self.indexer['plasma']\n        self.plasma_data = self.data[self.plasma_index]\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dcoil=-100, dplasma=-500,\n                          array=['Ic', 'nturn', 'fix', 'free', 'plasma'])\n        coilset.coil.insert(5.5, [-2, -1, 1], 0.5, 0.75, label='PF', free=True)\n        coilset.coil.insert(4.5, [-3.5, 2.5], 0.5, 0.75, label='PF')\n        coilset.coil.insert(3, range(-3, 3), 0.4, 0.9, label='CS', free=True)\n        coilset.linkframe(['CS2', 'CS3'])\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 3.2]}, turn='hex')\n        coilset.saloc['Ic'] = range(len(coilset.sloc))\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "framesetloc.GetSubFrameLoc.time_item",
        "number": 10000,
        "param_names": [
            "attr",
            "indexer"
        ],
        "params": [
            [
                "'Ic'",
                "'nturn'",
                "'x'"
            ],
            [
                "'loc'",
                "'sloc'",
                "'aloc'",
                "'saloc'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framesetloc:19",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8f88c5320af22fbef980f0bc7b2f48e85c477f780f366020a335f8eea52123b6",
        "warmup_time": -1
    },
    "framesetloc.GetSubFrameLoc.time_subitem": {
        "code": "class GetSubFrameLoc:\n    def time_subitem(self, attr, indexer):\n        \"\"\"Time subset data access.\"\"\"\n        if 'aloc' in indexer:\n            return self.indexer[attr][self.plasma_index]\n        return self.indexer['plasma', attr]\n\nclass SubFrameLoc:\n    def setup(self, attr, indexer):\n        \"\"\"Load coilset and set indexer.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n        if 'a' in indexer and attr not in self.coilset.array:\n            raise NotImplementedError\n        if 's' in indexer and attr not in self.coilset.subspace:\n            raise NotImplementedError\n        self.indexer = getattr(self.coilset, indexer)\n        self.data = np.arange(len(self.indexer[attr]))\n        self.plasma_index = self.indexer['plasma']\n        self.plasma_data = self.data[self.plasma_index]\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dcoil=-100, dplasma=-500,\n                          array=['Ic', 'nturn', 'fix', 'free', 'plasma'])\n        coilset.coil.insert(5.5, [-2, -1, 1], 0.5, 0.75, label='PF', free=True)\n        coilset.coil.insert(4.5, [-3.5, 2.5], 0.5, 0.75, label='PF')\n        coilset.coil.insert(3, range(-3, 3), 0.4, 0.9, label='CS', free=True)\n        coilset.linkframe(['CS2', 'CS3'])\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 3.2]}, turn='hex')\n        coilset.saloc['Ic'] = range(len(coilset.sloc))\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "framesetloc.GetSubFrameLoc.time_subitem",
        "number": 10000,
        "param_names": [
            "attr",
            "indexer"
        ],
        "params": [
            [
                "'Ic'",
                "'nturn'",
                "'x'"
            ],
            [
                "'loc'",
                "'sloc'",
                "'aloc'",
                "'saloc'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framesetloc:19",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a56dbd05767f352f281d2adcb3da16a16159025a4b52e410f2fdef738e413599",
        "warmup_time": -1
    },
    "framesetloc.SetSubFrameLoc.time_item": {
        "code": "class SetSubFrameLoc:\n    def time_item(self, attr, indexer):\n        \"\"\"Time attribute update.\"\"\"\n        self.indexer[attr] = self.data\n\n    def setup(self, attr, indexer):\n        \"\"\"Extend setup to exclude array and subspace incompatabilities.\"\"\"\n        super().setup(attr, indexer)\n        if attr in self.coilset.subspace and 's' not in indexer:\n            raise NotImplementedError\n\nclass SubFrameLoc:\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dcoil=-100, dplasma=-500,\n                          array=['Ic', 'nturn', 'fix', 'free', 'plasma'])\n        coilset.coil.insert(5.5, [-2, -1, 1], 0.5, 0.75, label='PF', free=True)\n        coilset.coil.insert(4.5, [-3.5, 2.5], 0.5, 0.75, label='PF')\n        coilset.coil.insert(3, range(-3, 3), 0.4, 0.9, label='CS', free=True)\n        coilset.linkframe(['CS2', 'CS3'])\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 3.2]}, turn='hex')\n        coilset.saloc['Ic'] = range(len(coilset.sloc))\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "framesetloc.SetSubFrameLoc.time_item",
        "number": 10000,
        "param_names": [
            "attr",
            "indexer"
        ],
        "params": [
            [
                "'Ic'",
                "'nturn'",
                "'x'"
            ],
            [
                "'loc'",
                "'sloc'",
                "'aloc'",
                "'saloc'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framesetloc:19",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8d482e326c85d363556bf70a7a1c00144ac85c6e5b4fe3fbf086a7ec83aea1e7",
        "warmup_time": -1
    },
    "framesetloc.SetSubFrameLoc.time_subitem": {
        "code": "class SetSubFrameLoc:\n    def time_subitem(self, attr, indexer):\n        \"\"\"Time plasma attribute update.\"\"\"\n        if 'aloc' in indexer:\n            data = self.indexer[attr]\n            data[self.plasma_index] = self.plasma_data\n            return\n        self.indexer['plasma', attr] = self.plasma_data\n\n    def setup(self, attr, indexer):\n        \"\"\"Extend setup to exclude array and subspace incompatabilities.\"\"\"\n        super().setup(attr, indexer)\n        if attr in self.coilset.subspace and 's' not in indexer:\n            raise NotImplementedError\n\nclass SubFrameLoc:\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dcoil=-100, dplasma=-500,\n                          array=['Ic', 'nturn', 'fix', 'free', 'plasma'])\n        coilset.coil.insert(5.5, [-2, -1, 1], 0.5, 0.75, label='PF', free=True)\n        coilset.coil.insert(4.5, [-3.5, 2.5], 0.5, 0.75, label='PF')\n        coilset.coil.insert(3, range(-3, 3), 0.4, 0.9, label='CS', free=True)\n        coilset.linkframe(['CS2', 'CS3'])\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 3.2]}, turn='hex')\n        coilset.saloc['Ic'] = range(len(coilset.sloc))\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "framesetloc.SetSubFrameLoc.time_subitem",
        "number": 10000,
        "param_names": [
            "attr",
            "indexer"
        ],
        "params": [
            [
                "'Ic'",
                "'nturn'",
                "'x'"
            ],
            [
                "'loc'",
                "'sloc'",
                "'aloc'",
                "'saloc'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framesetloc:19",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "26717406bb5ccd26cb07f7b647cc1a1d9ffc66e98d7dbde10434431b5ce1f3a2",
        "warmup_time": -1
    },
    "framespace.GetCurrent.time_getattr": {
        "code": "class GetCurrent:\n    def time_getattr(self):\n        \"\"\"Time current access via getattr method.\"\"\"\n        return self.framespace.Ic\n\nclass Current:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.framespace = FrameSpace().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        framespace = FrameSpace(base=['x', 'y', 'z'],\n                                required=['x', 'z'],\n                                available=['It', 'poly'],\n                                Subspace=['Ic'],\n                                Array=['Ic'])\n        framespace.insert(range(40), 1, Ic=6.5, name='PF1', part='PF',\n                          active=False)\n        framespace.subspace.Ic = np.random.rand(len(framespace.subspace))\n        framespace.store(self.filename)",
        "min_run_count": 2,
        "name": "framespace.GetCurrent.time_getattr",
        "number": 10000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framespace:21",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3ff79f116964b7603559620802998cfb110a349854ab6a86196893badbc27321",
        "warmup_time": -1
    },
    "framespace.GetCurrent.time_getattr_subspace": {
        "code": "class GetCurrent:\n    def time_getattr_subspace(self):\n        \"\"\"Time current access via getattr method.\"\"\"\n        return self.framespace.subspace.Ic\n\nclass Current:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.framespace = FrameSpace().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        framespace = FrameSpace(base=['x', 'y', 'z'],\n                                required=['x', 'z'],\n                                available=['It', 'poly'],\n                                Subspace=['Ic'],\n                                Array=['Ic'])\n        framespace.insert(range(40), 1, Ic=6.5, name='PF1', part='PF',\n                          active=False)\n        framespace.subspace.Ic = np.random.rand(len(framespace.subspace))\n        framespace.store(self.filename)",
        "min_run_count": 2,
        "name": "framespace.GetCurrent.time_getattr_subspace",
        "number": 10000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framespace:21",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8ba2332767732955b399b9d9daf51875fffd86cdfd4db474c43b7d18ad73866e",
        "warmup_time": -1
    },
    "framespace.GetCurrent.time_getitem": {
        "code": "class GetCurrent:\n    def time_getitem(self):\n        \"\"\"Time current access via getitem method.\"\"\"\n        return self.framespace['Ic']\n\nclass Current:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.framespace = FrameSpace().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        framespace = FrameSpace(base=['x', 'y', 'z'],\n                                required=['x', 'z'],\n                                available=['It', 'poly'],\n                                Subspace=['Ic'],\n                                Array=['Ic'])\n        framespace.insert(range(40), 1, Ic=6.5, name='PF1', part='PF',\n                          active=False)\n        framespace.subspace.Ic = np.random.rand(len(framespace.subspace))\n        framespace.store(self.filename)",
        "min_run_count": 2,
        "name": "framespace.GetCurrent.time_getitem",
        "number": 10000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framespace:21",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f335f6d16be1ab6d5c39fb02985636d93e9ba2a2597c6cd0ca78e265b89f8a39",
        "warmup_time": -1
    },
    "framespace.GetCurrent.time_loc": {
        "code": "class GetCurrent:\n    def time_loc(self):\n        \"\"\"Time current access via loc method.\"\"\"\n        return self.framespace.loc[:, 'Ic']\n\nclass Current:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.framespace = FrameSpace().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        framespace = FrameSpace(base=['x', 'y', 'z'],\n                                required=['x', 'z'],\n                                available=['It', 'poly'],\n                                Subspace=['Ic'],\n                                Array=['Ic'])\n        framespace.insert(range(40), 1, Ic=6.5, name='PF1', part='PF',\n                          active=False)\n        framespace.subspace.Ic = np.random.rand(len(framespace.subspace))\n        framespace.store(self.filename)",
        "min_run_count": 2,
        "name": "framespace.GetCurrent.time_loc",
        "number": 10000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framespace:21",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "aea886f777ccaa234503e586823e8399797206a328cac23a42ce2064efab7b7e",
        "warmup_time": -1
    },
    "framespace.SetCurrent.time_metaframe_data": {
        "code": "class SetCurrent:\n    def time_metaframe_data(self):\n        \"\"\"Time direct metaframe data update.\"\"\"\n        self.framespace.subspace.metaframe.data['Ic'] = self.current\n\n    def setup(self):\n        \"\"\"Extend Current.setup to extract current vector.\"\"\"\n        super().setup()\n        self.current = self.framespace.subspace.Ic.copy()\n\nclass Current:\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        framespace = FrameSpace(base=['x', 'y', 'z'],\n                                required=['x', 'z'],\n                                available=['It', 'poly'],\n                                Subspace=['Ic'],\n                                Array=['Ic'])\n        framespace.insert(range(40), 1, Ic=6.5, name='PF1', part='PF',\n                          active=False)\n        framespace.subspace.Ic = np.random.rand(len(framespace.subspace))\n        framespace.store(self.filename)",
        "min_run_count": 2,
        "name": "framespace.SetCurrent.time_metaframe_data",
        "number": 10000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framespace:21",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "717cbbde00655d81850f6c5b7022e184478004273809d526fdbdf17baf243f7b",
        "warmup_time": -1
    },
    "framespace.SetCurrent.time_subspace": {
        "code": "class SetCurrent:\n    def time_subspace(self):\n        \"\"\"Time update to frame subspace.\"\"\"\n        self.framespace.subspace.Ic = self.current\n\n    def setup(self):\n        \"\"\"Extend Current.setup to extract current vector.\"\"\"\n        super().setup()\n        self.current = self.framespace.subspace.Ic.copy()\n\nclass Current:\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        framespace = FrameSpace(base=['x', 'y', 'z'],\n                                required=['x', 'z'],\n                                available=['It', 'poly'],\n                                Subspace=['Ic'],\n                                Array=['Ic'])\n        framespace.insert(range(40), 1, Ic=6.5, name='PF1', part='PF',\n                          active=False)\n        framespace.subspace.Ic = np.random.rand(len(framespace.subspace))\n        framespace.store(self.filename)",
        "min_run_count": 2,
        "name": "framespace.SetCurrent.time_subspace",
        "number": 10000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "framespace:21",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e71832c12e13834712ba66a073eb23ae428feed71cf0c7340f45b033b5600f67",
        "warmup_time": -1
    },
    "version": 2
}