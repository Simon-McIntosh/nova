{
    "biotoperate.PlasmaEvaluate.time_field_magnitude": {
        "code": "class PlasmaEvaluate:\n    def time_field_magnitude(self):\n        \"\"\"Time computation of radial field.\"\"\"\n        return self.coilset.plasmagrid.bn\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaEvaluate.time_field_magnitude",
        "number": 1000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1b63d2301df1aa6b60070429be5904fca13c07f14678ba6492b8ac093ade9b1b",
        "warmup_time": -1
    },
    "biotoperate.PlasmaEvaluate.time_flux_function": {
        "code": "class PlasmaEvaluate:\n    def time_flux_function(self):\n        \"\"\"Time computation of radial field.\"\"\"\n        return self.coilset.plasmagrid.psi\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaEvaluate.time_flux_function",
        "number": 1000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8b41d1b4201b7631a81b56e3bb8902b5c1c2d80da7985436cdc1ea62659be96b",
        "warmup_time": -1
    },
    "biotoperate.PlasmaEvaluate.time_radial_field": {
        "code": "class PlasmaEvaluate:\n    def time_radial_field(self):\n        \"\"\"Time computation of radial field.\"\"\"\n        return self.coilset.plasmagrid.br\n\nclass PlasmaGrid:\n    def setup(self):\n        \"\"\"Load coilset from file.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaEvaluate.time_radial_field",
        "number": 1000,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cae06258e791f9d68ba090eee90f33f5e1b4d6d77d5191aab38e1382a3f2a302",
        "warmup_time": -1
    },
    "biotoperate.PlasmaTurns.time_update_turns": {
        "code": "class PlasmaTurns:\n    def time_update_turns(self, svd_rank):\n        \"\"\"Time generation of plasma grid.\"\"\"\n        self.coilset.plasmagrid.update_turns('Psi', svd_rank != -1)\n\n    def setup(self, svd_rank):\n        \"\"\"Load coilset from file and set svd rank.\"\"\"\n        self.coilset = CoilSet().load(self.filename)\n        self.coilset.plasmagrid.svd_rank = svd_rank\n\nclass PlasmaGrid:\n    def setup_cache(self):\n        \"\"\"Build reference coilset.\"\"\"\n        coilset = CoilSet(dplasma=-500)\n        coilset.firstwall.insert({'ellip': [4.2, -0.4, 1.25, 4.2]}, turn='hex')\n        coilset.plasmagrid.solve()\n        coilset.store(self.filename)",
        "min_run_count": 2,
        "name": "biotoperate.PlasmaTurns.time_update_turns",
        "number": 500,
        "param_names": [
            "svd_rank"
        ],
        "params": [
            [
                "10",
                "75",
                "200",
                "500",
                "-1"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "biotoperate:18",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c7a321446343b683daf11856238f13496ae6285034783e81372d238cbaff3735",
        "warmup_time": -1
    },
    "version": 2
}