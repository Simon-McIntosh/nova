#!/bin/bash

GMSH_VERSION=4_8_4
PYBIND11_VERSION=2.7.1
PETSC_VERSION=3.15.2
SLEPC_VERSION=3.15.1
ADIOS2_VERSION=2.7.1
PYVISTA_VERSION=0.31.3
NUMPY_VERSION=1.20.3
KAHIP_VERSION=3.11
XTENSOR_VERSION=0.23.10
XTENSOR_BLAS_VERSION=0.19.1
XTL_VERSION=0.7.2

########################################

PETSC_SLEPC_OPTFLAGS="-O2"
# PETSc and SLEPc number of make processes (--with-make-np)
PETSC_SLEPC_MAKE_NP=2
# Turn on PETSc and SLEPc debugging. "yes" or "no".
PETSC_SLEPC_DEBUGGING="no"
# Ubuntu MPI variant. "mpich" or "openmpi".
MPI="mpich"

# Install directories 
export PETSC_DIR=/usr/local/petsc 
export SLEPC_DIR=/usr/local/slepc

# Environment variables
export OPENBLAS_NUM_THREADS=1 
export OPENBLAS_VERBOSE=0

# Use python from conda env 
source ~/anaconda3/etc/profile.d/conda.sh
conda activate fenicsx

# Install dependencies available via apt-get.
# - First set of packages are required to build and run FEniCS.
# - Second set of packages are recommended and/or required to build
#   documentation or tests.
# - Third set of packages are optional, but required to run gmsh
#   pre-built binaries.
apt-get -qq update
apt-get -yq --with-new-pkgs -o Dpkg::Options::="--force-confold" upgrade 
apt-get -y install \
    clang \
    cmake \
    g++ \
    gfortran \
    libboost-dev \
    libboost-filesystem-dev \
    libboost-timer-dev \
    libhdf5-${MPI}-dev \
    liblapack-dev \
    lib${MPI}-dev \
    libopenblas-dev \
    llvm-9 \
    ninja-build \
    pkg-config \
    python3-dev \
    python3-numpy \
    python3-pip \
    python3-scipy \
    python3-setuptools 
#
apt-get -y install \
	doxygen \
	git \
	graphviz \
	valgrind \
	wget 
#
apt-get -y install \
	libglu1 \
	libxcursor-dev \
	libxft2 \
	libxinerama1 \
	libfltk1.3-dev \
	libfreetype6-dev  \
	libgl1-mesa-dev \
	liboce-foundation-dev \
	liboce-modeling-dev \
	liboce-visualization-dev
	# libocct-foundation-dev \
	# libocct-data-exchange-dev 
#
apt-get clean 
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
 
# Install Python packages (via pip)
# - First set of packages are required to build and run DOLFINx Python.
# - Second set of packages are recommended and/or required to build
#   documentation or run tests.
# LLVM_CONFIG required on aarch64, should be removed long-term.
LLVM_CONFIG=/usr/bin/llvm-config-9 pip3 install \
	--trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org \
	--no-cache-dir mpi4py numba 
pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org \
	-no-cache-dir cffi cppimport flake8 pybind11==${PYBIND11_VERSION} pytest pytest-xdist sphinx sphinx_rtd_theme

# Upgrade numpy via pip. Exclude binaries to avoid conflicts with libblas
# (See issue #126 and #1305)
pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org \
	--no-cache-dir --no-binary="numpy" numpy==${NUMPY_VERSION} --upgrade

# Install xtl, xtensor, xtensor-blas.
git clone -b ${XTL_VERSION} --single-branch https://github.com/xtensor-stack/xtl.git 
cd xtl 
cmake -G Ninja . 
ninja install 
cd ../ 
git clone -b ${XTENSOR_VERSION} --single-branch https://github.com/xtensor-stack/xtensor.git 
cd xtensor && \
cmake -G Ninja . 
ninja install 
cd ../ 
git clone -b ${XTENSOR_BLAS_VERSION} --single-branch https://github.com/xtensor-stack/xtensor-blas.git 
cd xtensor-blas 
cmake -G Ninja . 
ninja install 
rm -rf xtl xtensor xtensor-blas

# Install KaHIP
git clone https://github.com/KaHIP/KaHIP
cd KaHIP
./compile_withcmake.sh
cd ../

# Install ADIOS2
git clone https://github.com/ornladios/ADIOS2.git ADIOS2
mkdir adios2-build && cd adios2-build
cmake ../ADIOS2 
make -j 16 
make install 
cd ../
#wget -nc --quiet https://github.com/ornladios/ADIOS2/archive/v${ADIOS2_VERSION}.tar.gz -O adios2-v${ADIOS2_VERSION}.tar.gz 
#mkdir -p adios2-v${ADIOS2_VERSION} 
#tar -xf adios2-v${ADIOS2_VERSION}.tar.gz -C adios2-v${ADIOS2_VERSION} --strip-components 1 
#cmake -G Ninja -DADIOS2_USE_Fortran=off -DBUILD_TESTING=off -DADIOS2_BUILD_EXAMPLES=off -DADIOS2_USE_ZeroMQ=off -B build-dir -S ./adios2-v${ADIOS2_VERSION} 
#cmake --build build-dir 
#cmake --install build-dir 
#rm -rf /tmp/*

# Install GMSH
git clone -b gmsh_${GMSH_VERSION} --single-branch https://gitlab.onelab.info/gmsh/gmsh.git 
cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_BUILD_DYNAMIC=1  -DENABLE_OPENMP=1 -B build-dir -S gmsh 
cmake --build build-dir
cmake --install build-dir
rm -rf /tmp/*

export PYTHONPATH=/usr/local/lib:$PYTHONPATH

# Install PETSc and petsc4py with real and complex types
apt-get -qq update 
apt-get -y install bison flex 
wget -nc --quiet http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz 
mkdir -p ${PETSC_DIR}  
tar -xf petsc-${PETSC_VERSION}.tar.gz -C ${PETSC_DIR} --strip-components 1 
cd ${PETSC_DIR} 
# Real, 32-bit int
python3 ./configure \
	PETSC_ARCH=linux-gnu-real-32 \
    		--COPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--CXXOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--FOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--with-make-np=${PETSC_SLEPC_MAKE_NP} \
		--with-64-bit-indices=no \
		--with-debugging=${PETSC_SLEPC_DEBUGGING} \
		--with-fortran-bindings=no \
		--with-shared-libraries \
		--download-hypre \
		--download-metis \
		--download-mumps \
		--download-ptscotch \
		--download-scalapack \
		--download-spai \
		--download-suitesparse \
		--download-superlu \
		--download-superlu_dist \
		--with-scalar-type=real 
make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-real-32 ${MAKEFLAGS} all 
# Complex, 32-bit int
python3 ./configure \
	PETSC_ARCH=linux-gnu-complex-32 \
		--COPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--CXXOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--FOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--with-make-np=${PETSC_SLEPC_MAKE_NP} \
		--with-64-bit-indices=no \
		--with-debugging=${PETSC_SLEPC_DEBUGGING} \
		--with-fortran-bindings=no \
		--with-shared-libraries \
		--download-hypre \
		--download-metis \
		--download-mumps \
		--download-ptscotch \
		--download-scalapack \
		--download-suitesparse \
		--download-superlu \
		--download-superlu_dist \
		--with-scalar-type=complex 
make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-complex-32 ${MAKEFLAGS} all 
# Real, 64-bit int
python3 ./configure \
        PETSC_ARCH=linux-gnu-real-64 \
		--COPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--CXXOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--FOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--with-make-np=${PETSC_SLEPC_MAKE_NP} \
		--with-64-bit-indices=yes \
		--with-debugging=${PETSC_SLEPC_DEBUGGING} \
		--with-fortran-bindings=no \
		--with-shared-libraries \
		--download-hypre \
		--download-mumps \
		--download-ptscotch \
		--download-scalapack \
		--download-suitesparse \
		--download-superlu_dist \
		--with-scalar-type=real 
make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-real-64 ${MAKEFLAGS} all 
# Complex, 64-bit int
python3 ./configure \
	PETSC_ARCH=linux-gnu-complex-64 \
	        --COPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--CXXOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--FOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
		--with-make-np=${PETSC_SLEPC_MAKE_NP} \
		--with-64-bit-indices=yes \
		--with-debugging=${PETSC_SLEPC_DEBUGGING} \
		--with-fortran-bindings=no \
		--with-shared-libraries \
		--download-hypre \
		--download-mumps \
		--download-ptscotch \
		--download-scalapack \
		--download-suitesparse \
		--download-superlu_dist \
		--with-scalar-type=complex 
make PETSC_DIR=/usr/local/petsc PETSC_ARCH=linux-gnu-complex-64 ${MAKEFLAGS} all 

# Install petsc4py
cd ${PETSC_DIR} 
cd src/binding/petsc4py 
PETSC_ARCH=linux-gnu-real-32:linux-gnu-complex-32:linux-gnu-real-64:linux-gnu-complex-64 pip3 install \
	--trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org --no-cache-dir . 
# Cleanup
apt-get -y purge bison flex 
apt-get -y autoremove 
apt-get clean 
rm -rf \
	${PETSC_DIR}/**/tests/ \
        ${PETSC_DIR}/**/obj/ \
	${PETSC_DIR}/**/externalpackages/  \
	${PETSC_DIR}/CTAGS \
	${PETSC_DIR}/RDict.log \
	${PETSC_DIR}/TAGS \
	${PETSC_DIR}/docs/ \
	${PETSC_DIR}/share/ \
	${PETSC_DIR}/src/ \
	${PETSC_DIR}/systems/ \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install SLEPc
wget -nc --quiet https://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz --no-check-certificate
mkdir -p ${SLEPC_DIR}
tar -xf slepc-${SLEPC_VERSION}.tar.gz -C ${SLEPC_DIR} --strip-components 1 

cd ${SLEPC_DIR} 

export PETSC_ARCH=linux-gnu-real-32 
python3 ./configure  
make 
export PETSC_ARCH=linux-gnu-complex-32 
python3 ./configure 
make 
export PETSC_ARCH=linux-gnu-real-64 
python3 ./configure 
make 
export PETSC_ARCH=linux-gnu-complex-64 
python3 ./configure 
make 

# Install slepc4py
cd ${SLEPC_DIR} 
cd src/binding/slepc4py 
PETSC_ARCH=linux-gnu-real-32:linux-gnu-complex-32:linux-gnu-real-64:linux-gnu-complex-64 pip3 install \
	 --trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org \
	 --no-cache-dir . 
rm -rf ${SLEPC_DIR}/CTAGS ${SLEPC_DIR}/TAGS ${SLEPC_DIR}/docs ${SLEPC_DIR}/src/ ${SLEPC_DIR}/**/obj/ ${SLEPC_DIR}/**/test/ 
rm -rf /tmp/*

