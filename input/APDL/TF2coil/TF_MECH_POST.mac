!================================================================================
! 17 AUGUST 2020 - Fabian Krajewski ITB mbH
!		Tel.: +49 (0)231 94536534
!		This FE-model is part of the Framework service contract ITER/17/CT/6000000211/PMT
!		Task Order 4, Deliverable 2, Two TF coil model
!
!		Version 4.0 (TF_COILS_V9_4.cdb)
!
! 		This macro is Post Processing for the 2 coil TFC model
!
!		Following arguments are used for this macro
!   	arg1
!  TYPE OF MODEL, allow to choose the model to be ran 
!	arg1=1 -> TF1-SINGLE COIL MODEL TYPE B (20 deg, symmetry plane <-10 deg;+10deg>)
!   arg1=2 -> TF2-SINGLE COIL MODEL TYPE A (20 deg, symmetry plane <+10 deg;+30deg>)
!   arg1=3 -> TF1&TF2-TWO COILS MODEL      (40 deg, symmetry plane <-10 deg;+30deg>)
!
!		arg2
!  Revision
! 		LSTEPS
!  List of calculated load steps
!===============================================================================

!========================================================================
! SAVE AND DELETE CURRENT PARAMETERS
!
	
PARSAV,ALL,param,txt
/Clear

!=======================================================================
! SET THE MAGNETIC NODAL PREFRENCES
!

/CONFIG, NRES, 4000 	!If time steps are too many, the number should be increased to store the results.

!===========================================================================
! CONSTANT
!
		TRUE			= 1
		FALSE			= 0

!===============================================================================
! Enums (DO NOT MODIFY!)
!
		nStep = 4
		nCoil_MECH = 18


!===============================================================================
! LOCAL CS ID 
!
	!=======================================================================
	! GLOBAL CS
	!
	GlobCyl		= 11		! Global Cyl CS
	SymCart		= 12		! Cartesian System on symmetry plane between 2 coils
	HalfCart	= 13		! Cartesian System on half plane of coil 1
			
	!=======================================================================
	! OIS CS
	!
	U_OIS_SYS_1 	= 1001		! Local UPPER OIS CS (-10 deg plane) for bolts (X AXIS = PINS axis)
	L_OIS_SYS_1 	= 1002		! Local LOWER OIS CS (-10 deg plane) for bolts (X AXIS = PINS axis)
	U_OIS_SYS_2 	= 1003		! Local UPPER OIS CS (+10 deg plane) for bolts (X AXIS = PINS axis)
	L_OIS_SYS_2 	= 1004		! Local LOWER OIS CS (+10 deg plane) for bolts (X AXIS = PINS axis)
		
		
	!=======================================================================
	! IOIS CS
	!
	U_IOIS_SYS_1		= 2001	! Local UPPER IOIS CS (-10 deg plane) for plates (Z AXIS = toroidal direction))
	U_IOIS_PINS_SYS_1	= 2002	! Local UPPER IOIS CS (-10 deg plane) for pins (Z AXIS = PINS axis)
	L_IOIS_SYS_1		= 2003	! Local LOWER IOIS CS (-10 deg plane) for plates (Z AXIS = toroidal direction))
	L_IOIS_PINS_SYS_1	= 2004	! Local LOWER IOIS CS (-10 deg plane) for pins (Z AXIS = PINS axis)

	U_IOIS_SYS_2		= 2005	! Local UPPER IOIS CS (+10 deg plane) for plates (Z AXIS = toroidal direction))
	U_IOIS_PINS_SYS_2	= 2006	! Local UPPER IOIS CS (+10 deg plane) for pins (Z AXIS = PINS axis)
	L_IOIS_SYS_2		= 2007	! Local LOWER IOIS CS (+10 deg plane) for plates (Z AXIS = toroidal direction))
	L_IOIS_PINS_SYS_2	= 2008	! Local LOWER IOIS CS (+10 deg plane) for pins (Z AXIS = PINS axis)
	
	U_IOIS_SYS_3		= 2009	! Local UPPER IOIS CS (+30 deg plane) for plates (Z AXIS = toroidal direction))
	U_IOIS_PINS_SYS_3	= 2010	! Local UPPER IOIS CS (+30 deg plane) for pins (Z AXIS = PINS axis)
	L_IOIS_SYS_3		= 2011	! Local LOWER IOIS CS (+30 deg plane) for plates (Z AXIS = toroidal direction))
	L_IOIS_PINS_SYS_3	= 2012	! Local LOWER IOIS CS (+30 deg plane) for pins (Z AXIS = PINS axis)
	
	!=======================================================================
	! GRVITY SUPPORT CS
	!
	U_GS_SYS_1 	= 3001		! Local UPPER GS CS for bolts (X AXIS = PINS axis)
	L_GS_SYS_1 	= 3002		! Local LOWER GS CS for bolts (X AXIS = PINS axis)
	U_GS_SYS_2 	= 3003		! Local UPPER GS CS for bolts (Y AXIS = PINS axis)
	L_GS_SYS_2 	= 3004		! Local LOWER GS CS for bolts (Y AXIS = PINS axis)
	GS_SYS_1 	= 3005		! Local UPPER GS CS for bolts (X AXIS = PINS axis)
	GS_SYS_2 	= 3006		! Local LOWER GS CS for bolts (X AXIS = PINS axis)
	
	!=======================================================================
	! PRECOMPRESSION RING CS
	!
	PCR_SYS_1 	= 4001		! Local UPPER GS CS for bolts (X AXIS = PINS axis)
	PCR_SYS_2 	= 4002		! Local LOWER GS CS for bolts (X AXIS = PINS axis)

	!=======================================================================
	! SHEAR KEYS CS
	!
	U1_IIS_1	= 5001		! Local UPPER IIS 1 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	U2_IIS_1	= 5002		! Local UPPER IIS 2 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	U3_IIS_1	= 5003		! Local UPPER IIS 3 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	U4_IIS_1	= 5004		! Local UPPER IIS 4 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	
	L1_IIS_1	= 5005		! Local LOWER IIS 1 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	L2_IIS_1	= 5006		! Local LOWER IIS 2 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	L3_IIS_1	= 5007		! Local LOWER IIS 3 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	L4_IIS_1	= 5008		! Local LOWER IIS 4 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	
	U1_IIS_2	= 5011		! Local UPPER IIS 1 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	U2_IIS_2	= 5012		! Local UPPER IIS 2 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	U3_IIS_2	= 5013		! Local UPPER IIS 3 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	U4_IIS_2	= 5014		! Local UPPER IIS 4 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	
	L1_IIS_2	= 5015		! Local LOWER IIS 1 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	L2_IIS_2	= 5016		! Local LOWER IIS 2 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	L3_IIS_2	= 5017		! Local LOWER IIS 3 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)
	L4_IIS_2	= 5018		! Local LOWER IIS 4 CS (Z AXIS = key axis, Y AXIS = toroidal, Z=0 near PLASMA)

	!=======================================================================
	! TF CS
	!
	TF1_CS		= 6001		! Local Cylindrical CS for TF1 (toroidal direction follow the D shape of TF1)
	TF2_CS		= 6002		! Local Cylindrical CS for TF2 (toroidal direction follow the D shape of TF2)
	
	!===========================================================================
	! ELEMENT TYPE ID
	!
	ET_SOLID		= 1
	ET_CONTA178		= 2
	ET_C_STAND		= 3
	ET_T_STAND		= 4
	ET_C_MPC		= 5
	ET_T_MPC		= 6
	ET_C_SLID		= 7
	ET_T_SLID		= 8
	ET_MASS			= 9
	ET_SOLSH		= 10
	ET_LINK			= 11
	ET_MPC184		= 12
	ET_C_STAND_NOGAP	= 13
	ET_T_STAND_NOGAP	= 14
	ET_BEAM			= 15
	

!===============================================================================
!===============================================================================
!===============================================================================

	!§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§
	!
	! CHECK_POINT_1
	! (select HERE: Revision, and Case)
	!
	!		
	Rev  		= %arg2%				
	!
	!§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§	
			
	
	!===========================================================================
	!===========================================================================

	!===========================================================================
	!===========================================================================
	! SET TYPE OF MODEL (i.e. TF TYPE A, TF TYPE B OR 2 COILS MODEL)
	!
	*IF, 	%arg1%, EQ, 1, THEN
		
		RefCaseName 	= 'TF_TYPE_1'
		
		nCoil		= 1
		Coil_1		= 1
		Coil_2		= 1
		
		alfa_1		= -10
		alfa_2		=  10
	
	*ELSEIF, %arg1%, EQ, 2, THEN
		
		RefCaseName     = 'TF_TYPE_2'
		
		nCoil		= 1
		Coil_1		= 2
		Coil_2		= 2
		
		alfa_1		=  10
		alfa_2		=  30
	
	*ELSEIF, %arg1%, EQ, 3, THEN
		
		RefCaseName     = 'TF1andTF2'
		
		nCoil		= 2
		Coil_1		= 1
		Coil_2		= 2
		
		alfa_1		= -10
		alfa_2		=  30
	
	*ENDIF
	!===========================================================================
	!===========================================================================


!===============================================================================
!===============================================================================
!===============================================================================

	!=======================================================================
	! DO NOT MODIFY (unless you need to add other cases)
	!
		!==================================================================================================================================
		! EVALUATE PRECOMPRESSION RING TOROIDAL HOOP ON F4E MODEL
		!
		FEModel		= 'TF_COILS_MECH'		! FEM MODEL
		CaseName	= 'POST_PROCESSING'		! the case name
		KIND		= 'POST'
						
!===============================================================================
!===============================================================================
!===============================================================================
! Load CDB model to generate MECH and MAG DB model or load generated DB models
	
	/FILENAME,'MAGNET_MECH',1
	
!========================================================================
! set txt OUTPUT
!	
	/CWD, './%RefCaseName%_Rev_%Rev%/TEXTOUT'
	/OUTPUT,%CaseName%,txt
	/CWD, '../../'
	
	!§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§
	!
	! CHECK_POINT_2
	! (select HERE: change to PROPER DIRECTORY)
	!
	!
	/CWD, './%RefCaseName%_Rev_%Rev%/%KIND%/%CaseName%'
	!
	!
	!§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§
	
	!========================================================================
	! READ model
	!

	RESUME,'../../_models/%FEModel%', db, , 1, 1
	
	!========================================================================
	! LOAD ALL PARAMETERS
	!
	
	PARRES, CHANGE, '../../../param', txt

	ALLSEL, ALL

	!=========================================================================
	! set title
	!
	/TITLE,%RefCaseName%_Rev%Rev%  CaseName:%CaseName%  Scenario2:15MA Baseline

	!=========================================================================
	! INITIALIZE LOAD STEP CHAR ARRAY
	!
	*DIM,  LOAD, CHAR, 15,2
	LOAD(1)  ='L1_DW'
	LOAD(2)  ='L2_CS_PF'
	LOAD(3)  ='L3_CD'
	LOAD(4)  ='L4_TFO'
	LOAD(5)  ='L5_SOD'
	LOAD(6)  ='L6_SOP'
	LOAD(7)  ='L7_XPF'
	LOAD(8)  ='L8_CS10'
        LOAD(9)  ='L9_CS2U0'
        LOAD(10)  ='L10_CS2L0'
        LOAD(11) ='L11_SOF'
	LOAD(12) ='L12_SOB'
	LOAD(13) ='L13_EOB'
	LOAD(14) ='L14_EOP'
	LOAD(15) ='L15_EOB+PD'

	!=========================================================================
	! INITIALIZE UPPER OIS CHAR ARRAY
	!
	*DIM, C_UOIS_1, CHAR,  13
	*DIM, C_UOIS_2, CHAR,  13		
	C_UOIS_1(1) ='E_U110'	
	C_UOIS_1(2) ='E_U111'
	C_UOIS_1(3) ='E_U112'
	C_UOIS_1(4) ='E_U113'
	C_UOIS_1(5) ='E_U114'
	C_UOIS_1(6) ='E_U121'
	C_UOIS_1(7) ='E_U122'
	C_UOIS_1(8) ='E_U123'
	C_UOIS_1(9) ='E_U124'
	C_UOIS_1(10)='E_U131'
	C_UOIS_1(11)='E_U132'
	C_UOIS_1(12)='E_U133'
	C_UOIS_1(13)='E_U134'

	C_UOIS_2(1) ='E_U210'	
	C_UOIS_2(2) ='E_U211'
	C_UOIS_2(3) ='E_U212'
	C_UOIS_2(4) ='E_U213'
	C_UOIS_2(5) ='E_U214'
	C_UOIS_2(6) ='E_U221'
	C_UOIS_2(7) ='E_U222'
	C_UOIS_2(8) ='E_U223'
	C_UOIS_2(9) ='E_U224'
	C_UOIS_2(10)='E_U231'
	C_UOIS_2(11)='E_U232'
	C_UOIS_2(12)='E_U233'
	C_UOIS_2(13)='E_U234'

	!----------------------------------------------------------------------------
	! INITIALIZE LOWER OIS CHAR ARRAY
	!
	*DIM, C_LOIS_1, CHAR,  13		
	*DIM, C_LOIS_2, CHAR,  13		
	C_LOIS_1(1) ='E_L110'	
	C_LOIS_1(2) ='E_L111'
	C_LOIS_1(3) ='E_L112'
	C_LOIS_1(4) ='E_L113'
	C_LOIS_1(5) ='E_L114'
	C_LOIS_1(6) ='E_L121'
	C_LOIS_1(7) ='E_L122'
	C_LOIS_1(8) ='E_L123'
	C_LOIS_1(9) ='E_L124'
	C_LOIS_1(10)='E_L131'
	C_LOIS_1(11)='E_L132'
	C_LOIS_1(12)='E_L133'
	C_LOIS_1(13)='E_L134'

	C_LOIS_2(1) ='E_L210'	
	C_LOIS_2(2) ='E_L211'
	C_LOIS_2(3) ='E_L212'
	C_LOIS_2(4) ='E_L213'
	C_LOIS_2(5) ='E_L214'
	C_LOIS_2(6) ='E_L221'
	C_LOIS_2(7) ='E_L222'
	C_LOIS_2(8) ='E_L223'
	C_LOIS_2(9) ='E_L224'
	C_LOIS_2(10)='E_L231'
	C_LOIS_2(11)='E_L232'
	C_LOIS_2(12)='E_L233'
	C_LOIS_2(13)='E_L234'

	!----------------------------------------------------------------------------
	! INITIALIZE UPPER IOIS CHAR ARRAY
	!
	*DIM, C_UIOIS_1, CHAR,  7		
	*DIM, C_UIOIS_2, CHAR,  7		
	*DIM, S_UIOIS_1, ARRAY, 7
	*DIM, S_UIOIS_2, ARRAY, 7		
	
	C_UIOIS_1(1) = 'E_IU110'
	S_UIOIS_1(1) =  U_IOIS_SYS_1
	C_UIOIS_1(2) = 'E_IU111'
	S_UIOIS_1(2) =  U_IOIS_PINS_SYS_1	
	C_UIOIS_1(3) = 'E_IU112'
	S_UIOIS_1(3) =  U_IOIS_PINS_SYS_2
	C_UIOIS_1(4) = 'E_IU121'
	S_UIOIS_1(4) =  U_IOIS_PINS_SYS_1
	C_UIOIS_1(5) = 'E_IU122'
	S_UIOIS_1(5) =  U_IOIS_PINS_SYS_2
	C_UIOIS_1(6) = 'E_IU131'
	S_UIOIS_1(6) =  U_IOIS_PINS_SYS_1
	C_UIOIS_1(7) = 'E_IU132'
	S_UIOIS_1(7) =  U_IOIS_PINS_SYS_2

	C_UIOIS_2(1) = 'E_IU210'
	S_UIOIS_2(1) =  U_IOIS_SYS_2
	C_UIOIS_2(2) = 'E_IU211'
	S_UIOIS_2(2) =  U_IOIS_PINS_SYS_2	
	C_UIOIS_2(3) = 'E_IU212'
	S_UIOIS_2(3) =  U_IOIS_PINS_SYS_3
	C_UIOIS_2(4) = 'E_IU221'
	S_UIOIS_2(4) =  U_IOIS_PINS_SYS_2
	C_UIOIS_2(5) = 'E_IU222'
	S_UIOIS_2(5) =  U_IOIS_PINS_SYS_3
	C_UIOIS_2(6) = 'E_IU231'
	S_UIOIS_2(6) =  U_IOIS_PINS_SYS_2
	C_UIOIS_2(7) = 'E_IU232'
	S_UIOIS_2(7) =  U_IOIS_PINS_SYS_3

	!----------------------------------------------------------------------------
	! INITIALIZE LOWER IOIS CHAR ARRAY
	!
	*DIM, C_LIOIS_1, CHAR,  7		
	*DIM, C_LIOIS_2, CHAR,  7		
	*DIM, S_LIOIS_1, ARRAY, 7		
	*DIM, S_LIOIS_2, ARRAY, 7

	C_LIOIS_1(1) = 'E_IL110'
	S_LIOIS_1(1) =  L_IOIS_SYS_1
	C_LIOIS_1(2) = 'E_IL111'
	S_LIOIS_1(2) =  L_IOIS_PINS_SYS_1
	C_LIOIS_1(3) = 'E_IL112'
	S_LIOIS_1(3) =  L_IOIS_PINS_SYS_2
	C_LIOIS_1(4) = 'E_IL121'
	S_LIOIS_1(4) =  L_IOIS_PINS_SYS_1
	C_LIOIS_1(5) = 'E_IL122'
	S_LIOIS_1(5) =  L_IOIS_PINS_SYS_2
	C_LIOIS_1(6) = 'E_IL131'
	S_LIOIS_1(6) =  L_IOIS_PINS_SYS_1
	C_LIOIS_1(7) = 'E_IL132'
	S_LIOIS_1(7) =  L_IOIS_PINS_SYS_2

	C_LIOIS_2(1) = 'E_IL210'
	S_LIOIS_2(1) =  L_IOIS_SYS_2
	C_LIOIS_2(2) = 'E_IL211'
	S_LIOIS_2(2) =  L_IOIS_PINS_SYS_2	
	C_LIOIS_2(3) = 'E_IL212'
	S_LIOIS_2(3) =  L_IOIS_PINS_SYS_3
	C_LIOIS_2(4) = 'E_IL221'
	S_LIOIS_2(4) =  L_IOIS_PINS_SYS_2
	C_LIOIS_2(5) = 'E_IL222'
	S_LIOIS_2(5) =  L_IOIS_PINS_SYS_3
	C_LIOIS_2(6) = 'E_IL231'
	S_LIOIS_2(6) =  L_IOIS_PINS_SYS_2
	C_LIOIS_2(7) = 'E_IL232'
	S_LIOIS_2(7) =  L_IOIS_PINS_SYS_3
	
	!----------------------------------------------------------------------------
	! INITIALIZE Precompression Ring ARRAY
	!
	*DIM, C_PCR_RING, CHAR,  6
	C_PCR_RING(1) ='RING_1'
	C_PCR_RING(2) ='RING_2'
	C_PCR_RING(3) ='RING_3'
	C_PCR_RING(4) ='RING_4'
	C_PCR_RING(5) ='RING_5'
	C_PCR_RING(6) ='RING_6'

	!----------------------------------------------------------------------------
	! INITIALIZE UPPER M80 BOLTS ARRAY
	!
	*DIM, C_UM80_1, CHAR,  12		
	C_UM80_1(1) ='UM80_111'
	C_UM80_1(2) ='UM80_112'
	C_UM80_1(3) ='UM80_113'
	C_UM80_1(4) ='UM80_114'
	C_UM80_1(5) ='UM80_115'
	C_UM80_1(6) ='UM80_116'
	C_UM80_1(7) ='UM80_121'
	C_UM80_1(8) ='UM80_122'
	C_UM80_1(9) ='UM80_123'
	C_UM80_1(10)='UM80_124'
	C_UM80_1(11)='UM80_125'
	C_UM80_1(12)='UM80_126'

	!----------------------------------------------------------------------------
	! INITIALIZE UPPER M60 BOLTS ARRAY
	!
	*DIM, C_UM60_1, CHAR,  12		
	C_UM60_1(1) ='UM60_111'
	C_UM60_1(2) ='UM60_112'
	C_UM60_1(3) ='UM60_113'
	C_UM60_1(4) ='UM60_114'
	C_UM60_1(5) ='UM60_115'
	C_UM60_1(6) ='UM60_116'
	C_UM60_1(7) ='UM60_121'
	C_UM60_1(8) ='UM60_122'
	C_UM60_1(9) ='UM60_123'
	C_UM60_1(10)='UM60_124'
	C_UM60_1(11)='UM60_125'
	C_UM60_1(12)='UM60_126'

	!----------------------------------------------------------------------------
	! INITIALIZE LOWER M85 BOLTS ARRAY
	!
	*DIM, C_LM85_1, CHAR,  12		
	C_LM85_1(1) ='LM85_111'
	C_LM85_1(2) ='LM85_112'
	C_LM85_1(3) ='LM85_113'
	C_LM85_1(4) ='LM85_114'
	C_LM85_1(5) ='LM85_115'
	C_LM85_1(6) ='LM85_116'
	C_LM85_1(7) ='LM85_121'
	C_LM85_1(8) ='LM85_122'
	C_LM85_1(9) ='LM85_123'
	C_LM85_1(10)='LM85_124'
	C_LM85_1(11)='LM85_125'
	C_LM85_1(12)='LM85_126'

	!----------------------------------------------------------------------------
	! INITIALIZE LOWER M60 BOLTS ARRAY
	!
	*DIM, C_LM60_1, CHAR,  14
	C_LM60_1(1) ='LM60_111'
	C_LM60_1(2) ='LM60_112'
	C_LM60_1(3) ='LM60_113'
	C_LM60_1(4) ='LM60_114'
	C_LM60_1(5) ='LM60_115'
	C_LM60_1(6) ='LM60_116'
	C_LM60_1(7) ='LM60_117'
	C_LM60_1(8) ='LM60_121'
	C_LM60_1(9) ='LM60_122'
	C_LM60_1(10)='LM60_123'
	C_LM60_1(11)='LM60_124'
	C_LM60_1(12)='LM60_125'
	C_LM60_1(13)='LM60_126'
	C_LM60_1(14)='LM60_127'

	!----------------------------------------------------------------------------
	! INITIALIZE CONTA ARRAY
	!
	*DIM, C_GS_CONT_1, CHAR,  12		
	C_GS_CONT_1(1) ='E_UGS_11'
	C_GS_CONT_1(2) ='E_LGS_11'
	C_GS_CONT_1(3) ='E_UGS_12'
	C_GS_CONT_1(4) ='E_LGS_12'
	
	!----------------------------------------------------------------------------
	! INITIALIZE UPPER M80 BOLTS ARRAY
	!
	*DIM, C_UM80_2, CHAR,  12		
	C_UM80_2(1) ='UM80_211'
	C_UM80_2(2) ='UM80_212'
	C_UM80_2(3) ='UM80_213'
	C_UM80_2(4) ='UM80_214'
	C_UM80_2(5) ='UM80_215'
	C_UM80_2(6) ='UM80_216'
	C_UM80_2(7) ='UM80_221'
	C_UM80_2(8) ='UM80_222'
	C_UM80_2(9) ='UM80_223'
	C_UM80_2(10)='UM80_224'
	C_UM80_2(11)='UM80_225'
	C_UM80_2(12)='UM80_226'

	!----------------------------------------------------------------------------
	! INITIALIZE UPPER M60 BOLTS ARRAY
	!
	*DIM, C_UM60_2, CHAR,  12		
	C_UM60_2(1) ='UM60_211'
	C_UM60_2(2) ='UM60_212'
	C_UM60_2(3) ='UM60_213'
	C_UM60_2(4) ='UM60_214'
	C_UM60_2(5) ='UM60_215'
	C_UM60_2(6) ='UM60_216'
	C_UM60_2(7) ='UM60_221'
	C_UM60_2(8) ='UM60_222'
	C_UM60_2(9) ='UM60_223'
	C_UM60_2(10)='UM60_224'
	C_UM60_2(11)='UM60_225'
	C_UM60_2(12)='UM60_226'

	!----------------------------------------------------------------------------
	! INITIALIZE LOWER M85 BOLTS ARRAY
	!
	*DIM, C_LM85_2, CHAR,  12		
	C_LM85_2(1) ='LM85_211'
	C_LM85_2(2) ='LM85_212'
	C_LM85_2(3) ='LM85_213'
	C_LM85_2(4) ='LM85_214'
	C_LM85_2(5) ='LM85_215'
	C_LM85_2(6) ='LM85_216'
	C_LM85_2(7) ='LM85_221'
	C_LM85_2(8) ='LM85_222'
	C_LM85_2(9) ='LM85_223'
	C_LM85_2(10)='LM85_224'
	C_LM85_2(11)='LM85_225'
	C_LM85_2(12)='LM85_226'

	!----------------------------------------------------------------------------
	! INITIALIZE LOWER M60 BOLTS ARRAY
	!
	*DIM, C_LM60_2, CHAR,  14	
	C_LM60_2(1) ='LM60_211'
	C_LM60_2(2) ='LM60_212'
	C_LM60_2(3) ='LM60_213'
	C_LM60_2(4) ='LM60_214'
	C_LM60_2(5) ='LM60_215'
	C_LM60_2(6) ='LM60_216'
	C_LM60_2(7) ='LM60_217'
	C_LM60_2(8) ='LM60_221'
	C_LM60_2(9) ='LM60_222'
	C_LM60_2(10)='LM60_223'
	C_LM60_2(11)='LM60_224'
	C_LM60_2(12)='LM60_225'
	C_LM60_2(13)='LM60_226'
	C_LM60_2(14)='LM60_227'

	!----------------------------------------------------------------------------
	! INITIALIZE CONTA ARRAY
	!
	*DIM, C_GS_CONT_2, CHAR,  12
	C_GS_CONT_2(1) ='E_UGS_21'
	C_GS_CONT_2(2) ='E_LGS_21'
	C_GS_CONT_2(3) ='E_UGS_22'
	C_GS_CONT_2(4) ='E_LGS_22'

	!----------------------------------------------------------------------------
	*DIM, IIS_NAMES, CHAR, 78
	
	!----------------------------------------------------------------------------
	! OIS Bolt positions
	!	
	*DIM, POS_UOIS, ARRAY, 12,2 
	POS_UOIS(1,1) = 6.25
	POS_UOIS(2,1) = 6.67
	POS_UOIS(3,1) = 7.09
	POS_UOIS(4,1) = 7.51
	POS_UOIS(1,2) = 6.15
	POS_UOIS(2,2) = 6.15
	POS_UOIS(3,2) = 6.15
	POS_UOIS(4,2) = 6.15
	POS_UOIS(5,1) = 6.25
	POS_UOIS(6,1) = 6.67
	POS_UOIS(7,1) = 7.09
	POS_UOIS(8,1) = 7.51
	POS_UOIS(5,2) = 6.38
	POS_UOIS(6,2) = 6.38
	POS_UOIS(7,2) = 6.38
	POS_UOIS(8,2) = 6.38
	POS_UOIS(9,1) = 6.25
	POS_UOIS(10,1) = 6.67
	POS_UOIS(11,1) = 7.09
	POS_UOIS(12,1) = 7.51
	POS_UOIS(9,2) = 6.62
	POS_UOIS(10,2) = 6.62
	POS_UOIS(11,2) = 6.62
	POS_UOIS(12,2) = 6.62
	*DIM, POS_LOIS, ARRAY, 12,2 
	POS_LOIS(1,1) = 6.25
	POS_LOIS(2,1) = 6.67
	POS_LOIS(3,1) = 7.09
	POS_LOIS(4,1) = 7.51
	POS_LOIS(1,2) = -6.56
	POS_LOIS(2,2) = -6.56
	POS_LOIS(3,2) = -6.56
	POS_LOIS(4,2) = -6.56
	POS_LOIS(5,1) = 6.25
	POS_LOIS(6,1) = 6.67
	POS_LOIS(7,1) = 7.09
	POS_LOIS(8,1) = 7.51
	POS_LOIS(5,2) = -6.33
	POS_LOIS(6,2) = -6.33
	POS_LOIS(7,2) = -6.33
	POS_LOIS(8,2) = -6.33
	POS_LOIS(9,1) = 6.25
	POS_LOIS(10,1) = 6.67
	POS_LOIS(11,1) = 7.09
	POS_LOIS(12,1) = 7.51
	POS_LOIS(9,2) = -6.09
	POS_LOIS(10,2) = -6.09
	POS_LOIS(11,2) = -6.09
	POS_LOIS(12,2) = -6.09
	
!==========================================================================================
!==========================================================================================
!==========================================================================================
! POST PROCESSING - COMPUTE FORCES ON WEDGE AND GRAVITY SUPPORT RING
!


	!----------------------------------------------------------------------------
	! PRODUCE FORCES ON OIS STRUCTURES
	! 
	/POST1	
		!===========================================================================
		! INITIALIZE ARRAY
		!	
		*DIM, IIS_FORCES, 	ARRAY,   78, 16, 4	! U KEY 1 ARRAY to store forces
		*DIM, GS_SUP,           ARRAY,   6,  15, 2	! GRAVITY SUPP ARRAY to store forces BOTH COILS
		*DIM, GS,               ARRAY,   1,  15, 2	! CRYO RING ARRAY to store forces BOTH COILS
		*DIM, WEDGE,  		ARRAY,   1,  15, 2	! WEDGE ARRAY to store forces BOTH COILS
		*DIM, UOIS,  		ARRAY,  13,  15, 4	! UPPER OIS ARRAY
		*DIM, UIOIS,  		ARRAY,   7,  15, 6	! UPPER IOIS ARRAY
		*DIM, LIOIS,  		ARRAY,   7,  15, 6	! LOWER IOIS ARRAY
		*DIM, LOIS,  		ARRAY,  13,  15, 4	! LOWER OIS ARRAY
		*DIM, PCR_RING, 	ARRAY,   6,  15, 2	! PCR RING FORCES ARRAY
		*DIM, UM80,             ARRAY,   12, 15, 4	! Upper M80 GS bolts
		*DIM, UM60,             ARRAY,   12, 15, 4	! Upper M60 GS bolts
		*DIM, LM85,             ARRAY,   12, 15, 4	! Lower M85 GS bolts
		*DIM, LM60,             ARRAY,   14, 15, 4	! Lower M60 GS bolts
		*DIM, TFLOAD,		ARRAY,	 15, 6, 2	! Force and Moment SUM for TF1 and TF2

		*DIM, WP_DISPL,	 	ARRAY,   316,16, 6	! WP barycenter line displacements
		*DIM, INT_CASE_DISPL, 	ARRAY,   352,16, 6	! TF CASE internal perimiter displacements (facing plasma)
		*DIM, EXT_CASE_DISPL, 	ARRAY,   351,16, 6	! TF CASE external perimiter displacements (facing CS)

		*DIM, WP_COOR,	 	ARRAY,   316,1, 6	! WP barycenter line coordinates (316 nodes, 3 coordinates, 2 coils)
		*DIM, INT_CASE_COOR, 	ARRAY,   352,1, 6	! TF CASE internal perimiter coordinates (facing plasma)
		*DIM, EXT_CASE_COOR, 	ARRAY,   351,1, 6	! TF CASE external perimiter coordinates (facing CS)
		ALLSEL, ALL

		!----------------------------------------------------------------------------
		! INITIALIZE OUTPUT ARRAYS
		!

		/SHOW,JPEG,,0,

		!===========================================================================
		!LOOP ON COILS
		!
		*DO, i, Coil_1, Coil_2

			!===========================================================================
			! LOOP ON DIFFERENT load steps
			!
			*DO, j, 1, 15
			
				*IF, LSTEPS(j,1),EQ, 1, THEN

					!--------------------------------
					! set load step
					!
					FILE,'../../MECHANICAL/MAGNET_MECH','rst'				! read result file

					SET, j

					!===========================================================================
					!===========================================================================
					! RADIAL, VERTICAL AND TOROIDAL DISPLACEMENTS TROUGH THE D-SHAPE OF WP AND TF CASE
					!===========================================================================
					!===========================================================================

					LocalCS = TF%i%_CS

					!======================================
					! WP
					!
					ESEL, NONE
					NSEL, NONE
					CMSEL, S, N_HALF_WP_%i%
					*GET,nN,NODE,,COUNT
					*GET,iN,NODE,,NUM,MIN
					*DO, k, 1, nN
						CSYS, LocalCS
						angle = NY(iN)

						*IF, angle, LT, 0, THEN
							angle=angle+360
						*ENDIF

						CSYS, GlobCyl
						RSYS, GlobCyl
						Urad = UX(iN)
						Utor = UY(iN)
						Uvert = Uz(iN)
						WP_DISPL(k,1,i)= angle
						WP_DISPL(k,1,i+2)= angle
						WP_DISPL(k,1,i+4)= angle
						WP_DISPL(k,j+1,i)= Urad
						WP_DISPL(k,j+1,i+2)= Utor
						WP_DISPL(k,j+1,i+4)= Uvert
						*IF, J, EQ,1, THEN
                            WP_COOR(k,1,i)=NX(iN)
                            WP_COOR(k,1,i+2)=NY(iN)
                            WP_COOR(k,1,i+4)=NZ(iN)
                        *ENDIF
                        iNnew=NDNEXT(iN)
						iN=iNnew
					*ENDDO

					!======================================
					! INTERNAL TF CASE
					!
					ESEL, NONE
					NSEL, NONE
					CMSEL, S, N_INT_CASE_%i%
					*GET,nN,NODE,,COUNT
					*GET,iN,NODE,,NUM,MIN
					*DO, k, 1, nN
						CSYS, LocalCS
						angle = NY(iN)

						*IF, angle, LT, 0, THEN
							angle=angle+360
						*ENDIF

						CSYS, GlobCyl
						RSYS, GlobCyl
						Urad = UX(iN)
						Utor = UY(iN)
						Uvert = Uz(iN)
						INT_CASE_DISPL(k,1,i)= angle
						INT_CASE_DISPL(k,1,i+2)= angle
						INT_CASE_DISPL(k,1,i+4)= angle
						INT_CASE_DISPL(k,j+1,i)= Urad
						INT_CASE_DISPL(k,j+1,i+2)= Utor
						INT_CASE_DISPL(k,j+1,i+4)= Uvert
						*IF, J, EQ,1, THEN
							INT_CASE_COOR(k,1,i)=NX(iN)
							INT_CASE_COOR(k,1,i+2)=NY(iN)
							INT_CASE_COOR(k,1,i+4)=NZ(iN)
						*ENDIF
						iNnew=NDNEXT(iN)
						iN=iNnew
					*ENDDO


					!======================================
					! EXTERNAL TF CASE
					!
					ESEL, NONE
					NSEL, NONE
					CMSEL, S, N_EXT_CASE_%i%
					*GET,nN,NODE,,COUNT
					*GET,iN,NODE,,NUM,MIN
					*DO, k, 1, nN
						CSYS, LocalCS
						angle = NY(iN)

						*IF, angle, LT, 0, THEN
							angle=angle+360
						*ENDIF

						CSYS, GlobCyl
						RSYS, GlobCyl
						Urad = UX(iN)
						Utor = UY(iN)
						Uvert = Uz(iN)
						EXT_CASE_DISPL(k,1,i) = angle
						EXT_CASE_DISPL(k,1,i+2) = angle
						EXT_CASE_DISPL(k,1,i+4) = angle
						EXT_CASE_DISPL(k,j+1,i)= Urad
						EXT_CASE_DISPL(k,j+1,i+2)= Utor
						EXT_CASE_DISPL(k,j+1,i+4)= Uvert
						*IF, J, EQ,1, THEN
                            EXT_CASE_COOR(k,1,i)=NX(iN)
                            EXT_CASE_COOR(k,1,i+2)=NY(iN)
                            EXT_CASE_COOR(k,1,i+4)=NZ(iN)
                        *ENDIF
                        iNnew=NDNEXT(iN)
						iN=iNnew
					*ENDDO

					RSYS, 0
					CSYS, 0
					!===========================================================================
					!===========================================================================
					! GRAVITY SUPPORT RING (CRYOSTAT)
					!===========================================================================
					!===========================================================================
					CSYS,1
					!======================================
					! TYPE B
					!
					*IF, 	 i, EQ, 1, THEN
						CMSEL,S, TF1_GS_CRYO_RING
						NSLE, S
						NSEL,R,LOC,Y,-10
					!======================================
					! TYPE A
					!
					*ELSEIF, i, EQ, 2, THEN
						CMSEL,S, TF2_GS_CRYO_RING
						NSLE, S
						NSEL,R,LOC,Y,10
					*ENDIF					

					!--------------------------------
					! Forces from FSUM
					!
					RSYS, 1
					FSUM,RSYS
					*GET,F_TOR_GS,FSUM,0, ITEM, FY

					!--------------------------------
					! Write integrated Stress on file
					!
					GS(1,j,i)=F_TOR_GS

					
					!===========================================================================
					!===========================================================================
					! BEARING CRADLE UNDER CRYOSTAT RING AND GRAVITY SUPPORT
					!===========================================================================
					!===========================================================================
					CSYS,1
					!======================================
					! TYPE B
					!
					*IF, 	 i, EQ, 1, THEN
						CMSEL,S, N_GS_DOF
						NSEL,R,LOC,Y,-10,10 ! Plane with all DOF Consttaint
					!======================================
					! TYPE A
					!
					*ELSEIF, i, EQ, 2, THEN
						CMSEL,S, N_GS_DOF
						NSEL,R,LOC,Y,10,30  ! Plane with all DOF Consttaint
					*ENDIF
					
					!--------------------------------
					! Set summation point
					!
					*GET,minX,NODE,,MNLOC,X
					*GET,maxX,NODE,,MXLOC,X
					locX=(minX+maxX)/2
					*GET,minY,NODE,,MNLOC,Y
					*GET,maxY,NODE,,MXLOC,Y
					locY=(minY+maxY)/2
					*GET,locZ,NODE,,MNLOC,Z
					nN=NODE(locX,locY,locZ)
					spoint,nN
					
					!--------------------------------
					! Surface for FSUM command
					!
					
					ESLN
					
					!--------------------------------
					! GET TOROIDAL FORCES
					!
					RSYS,1
					FSUM, RSYS
					*GET,F_RAD_GS,FSUM,0, ITEM, FX
					*GET,F_TOR_GS,FSUM,0, ITEM, FY
					*GET,F_VER_GS,FSUM,0, ITEM, FZ
					*GET,M_RAD_GS,FSUM,0, ITEM, MX
					*GET,M_TOR_GS,FSUM,0, ITEM, MY
					*GET,M_VER_GS,FSUM,0, ITEM, MZ

					!--------------------------------
					! Write toroidal force on file
					!
					GS_SUP(1,j,i)=F_RAD_GS
					GS_SUP(2,j,i)=F_TOR_GS
					GS_SUP(3,j,i)=F_VER_GS
					GS_SUP(4,j,i)=M_RAD_GS
					GS_SUP(5,j,i)=M_TOR_GS
					GS_SUP(6,j,i)=M_VER_GS

					!===========================================================================
					!===========================================================================
					! WEDGING
					!===========================================================================
					!===========================================================================

					CMSEL, S, WEDGING
					CMSEL, A, WEDGING_EDGE

					!======================================
					! TYPE B
					!
					*IF, 	 i, EQ, 1, THEN
						CSYS,1
					    ESEL,U,CENT,Y,0,40
						NSLE, S
					!======================================
					! TYPE A
					!
					*ELSEIF, i, EQ, 2, THEN
						CSYS,1
					    ESEL,U,CENT,Y,-40,0
						NSLE, S
					*ENDIF
					CSYS,0
					!======================================
					! LOOP ON GAP ELEM
					!
					F_TOR_WEDGE = 0
					*GET,nE,ELEM,,COUNT
					*GET,iE,ELEM,,NUM,MIN

					*DO, k, 1, nE

						*GET, NormalForce, ELEM, iE, SMISC, 1
						F_TOR_WEDGE=F_TOR_WEDGE+NormalForce
						*GET,iEnew,ELEM,iE,NXTH
						iE=iEnew
					*ENDDO
				
					!--------------------------------
					! Store on ARRAY
					!
					WEDGE(1,j,i)=F_TOR_WEDGE


					!===========================================================================
					!===========================================================================
					! KEYS
					!===========================================================================
					!===========================================================================
					
					Lelem = 7.5e-2
					tol   = 1.0e-2
					Row   = 0
					
					
					*DO, k, 1, 8

						!--------------------------------
						! INITIALIZE IIS name ARRAY
						!
						*IF, k, LE, 4, THEN
							Prefix = 'U'
							ID = k
						*ELSE
							Prefix = 'L'
							ID = k-4
						*ENDIF
					
						!--------------------------------
						! Store Num of rows of elem for different
						!
						*IF,     ID, EQ, 1, THEN
							nRow  = 6
							
						*ELSEIF, ID, EQ, 2, THEN
							nRow = 9
					
						*ELSE
							nRow = 12
						*ENDIF

						

						!--------------------------------
						! Select Conta elems
						!
						LocSYS = %Prefix%%ID%_IIS_%i%
						CMSEL, S, E_IIS_%Prefix%%i%%ID%
						
						*DO, p, 1, nRow
							Row=Row+1
							CSYS, 0
							CSYS, LocSYS
							zMin=Lelem*(p-1)
							zMAX=Lelem*(P)

							ESEL, R, CENT, Z, zMin, zMax
							NSLE, S
							
							RSYS, LocSYS
							FSUM, RSYS, CONT
							
							*GET, F_TOR,   FSUM, 0, ITEM, FY
							*GET, F_SHEAR, FSUM, 0, ITEM, FX

							IIS_NAMES(Row) = '%Prefix%%ID%'
							
							*IF, j, EQ, 1, THEN
								IIS_FORCES(Row,j,i) = Lelem*p
								IIS_FORCES(Row,j,i+2)= Lelem*p
							*ENDIF
							*IF,k,GT,4,THEN
								IIS_FORCES(Row,j+1,i)  = -F_TOR
								IIS_FORCES(Row,j+1,i+2)= -F_SHEAR
							*ELSE
								IIS_FORCES(Row,j+1,i)  = F_TOR
								IIS_FORCES(Row,j+1,i+2)= F_SHEAR
							*ENDIF
							CMSEL, S, E_IIS_%Prefix%%i%%ID%
						*ENDDO
							
					*ENDDO		

					!===========================================================================
					!===========================================================================
					! UPPER OIS
					!===========================================================================
					!===========================================================================

					CSYS,1
					RSYS,1
					*DO, k, 1, 13

						!--------------------------------
						! SET ANGLE
						!
						*IF, i, EQ, 1, THEN
							alfa_init	= -10.6
							alfa_fin	= -10.3
						*ELSE
							alfa_init	= 9.25
							alfa_fin	= 9.45
						*ENDIF
						
						!--------------------------------
						! SHIMS
						!
						*IF, k, EQ, 1, THEN

							!--------------------------------
							! SELECT
							!					
							CMSEL, S, C41
							NSLE, S
							CSYS, 11
							ESEL, R, CENT, Y, alfa_init-0.5, alfa_fin+0.5
							ESEL, R, CENT, Z, 0, 100
							NSLE, S

							!--------------------------------
							! compute contact forces
							!
							FSUM, RSYS, CONT
							*GET, F_NORM, FSUM, 0, ITEM, FY
							*GET, F_TAN1, FSUM, 0, ITEM, FX
							*GET, F_TAN2, FSUM, 0, ITEM, FZ
							F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)

							!--------------------------------
							! Write integrated Stress on file
							!
							*IF,i,EQ,2,THEN
								UOIS(k,j,i)=F_NORM*(-1)
                                                        *ELSE
								UOIS(k,j,i)=F_NORM
                                                        *ENDIF
                                                                UOIS(k,j,i+2)=F_TAN

                                                !--------------------------------
						! BOLTS
						!
						*ELSE
							
							! Select OIS BOLTS
							CMSEL,S,OIS_M110
							CMSEL,A,OIS_M130
							NSLE
							NSEL,R,LOC,Y,alfa_init-0.1,alfa_fin
							!--------------------------------
							! Compute bolt force
							!
							NSEL,R,LOC,X,POS_UOIS(k-1,1)-0.1,POS_UOIS(k-1,1)+0.1
							NSEL,R,LOC,Z,POS_UOIS(k-1,2)-0.1,POS_UOIS(k-1,2)+0.1
							ESEL,R,CENT,Y,alfa_init,alfa_fin+0.2
							
							FSUM,RSYS
							
							*GET, F_NORM, FSUM, 0, ITEM, FY
							*GET, F_TAN1, FSUM, 0, ITEM, FX
							*GET, F_TAN2, FSUM, 0, ITEM, FZ
							F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)
							
							UOIS(k,j,i)=F_NORM
							UOIS(k,j,i+2)=F_TAN

						*ENDIF

					*ENDDO	


					!===========================================================================
					!===========================================================================
					! LOWER OIS
					!===========================================================================
					!===========================================================================

					CSYS,1
					RSYS,1
					*DO, k, 1, 13

						!--------------------------------
						! SET ANGLE
						!
						*IF, i, EQ, 1, THEN
							alfa_init	= -10.6
							alfa_fin	= -10.3
						*ELSE
							alfa_init	= 9.25
							alfa_fin	= 9.45
						*ENDIF

						!--------------------------------
						! Select entityt set
						!
						Cname = C_LOIS_%i%(k)

						!--------------------------------
						! SHIMS
						!
						*IF, k, EQ, 1, THEN

							!--------------------------------
							! SELECT 
							!					
							CMSEL, S, C42
							NSLE, S
							CSYS, 11
							ESEL, R, CENT, Y, alfa_init-0.5, alfa_fin+0.5
							ESEL, R, CENT, Z, -100, 0
							NSLE, S
							
							!--------------------------------
							! compute contact forces
							!
							FSUM, RSYS, CONT
							*GET, F_NORM, FSUM, 0, ITEM, FY
							*GET, F_TAN1, FSUM, 0, ITEM, FX
							*GET, F_TAN2, FSUM, 0, ITEM, FZ
							F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)


							!--------------------------------
							! Write integrated Stress on file
							!
							*IF,i,EQ,2,THEN
                                                        LOIS(k,j,i)=F_NORM*(-1)
                                                        *ELSE
                                                        LOIS(k,j,i)=F_NORM
                                                        *ENDIF
                                                        LOIS(k,j,i+2)=F_TAN


						!--------------------------------
						! BOLTS
						!
						*ELSE
							! Select OIS BOLTS
							CMSEL,S,OIS_M110
							CMSEL,A,OIS_M130
							NSLE
							NSEL,R,LOC,Y,alfa_init-0.1,alfa_fin
							!--------------------------------
							! Compute bolt force
							!
							NSEL,R,LOC,X,POS_LOIS(k-1,1)-0.1,POS_LOIS(k-1,1)+0.1
							NSEL,R,LOC,Z,POS_LOIS(k-1,2)-0.1,POS_LOIS(k-1,2)+0.1
							ESEL,R,CENT,Y,alfa_init,alfa_fin+0.2
							
							FSUM,RSYS
							
							*GET, F_NORM, FSUM, 0, ITEM, FY
							*GET, F_TAN1, FSUM, 0, ITEM, FX
							*GET, F_TAN2, FSUM, 0, ITEM, FZ
							F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)
							
							LOIS(k,j,i)=F_NORM
							LOIS(k,j,i+2)=F_TAN

						*ENDIF

					*ENDDO


					!===========================================================================
					!===========================================================================
					! UPPER INTERMIDIATE IOIS
					!===========================================================================
					!===========================================================================
					*DO, k, 1, 7

						!--------------------------------
						! SET ANGLE
						!
						*IF, k, EQ, 1, THEN
							
							*IF, i, EQ, 1, THEN
								Cname = 'TF1_IOIS_UP_PLATES'
							*ELSE
								Cname = 'TF2_IOIS_UP_PLATES'
							*ENDIF
						*ELSE
							Cname = C_UIOIS_%i%(k)
						*ENDIF
						!--------------------------------
						! Select entityt set
						!
						LCSYS = S_UIOIS_%i%(k)
						
						CMSEL, S, Cname
						NSLE, S
						CSYS,LCSYS
						RSYS,LCSYS
						*IF,i,EQ,1,THEN
							*IF,k,EQ,1,THEN
								NSEL,R,LOC,Z,0.01,0.3
								FSUM,RSYS
								*GET,F_TAN1,FSUM,0, ITEM, FZ
								*GET,F_NORM,FSUM,0, ITEM, FX
								*GET,F_TAN2,FSUM,0, ITEM, FY
							*ELSE
								ESLN
								ESEL,R,REAL,,1152
								ESEL,R,CENT,Z,-0.2,-0.004
								NSLE
								FSUM,RSYS,CONT
								*GET,F_TAN1,FSUM,0, ITEM, FY
								*GET,F_NORM,FSUM,0, ITEM, FZ
								*GET,F_TAN2,FSUM,0, ITEM, FX
							*ENDIF
						*ELSEIF,i,EQ,2,THEN
							*IF,k,EQ,1,THEN
								NSEL,R,LOC,Z,-0.002,0.005
								FSUM,RSYS
								*GET,F_TAN1,FSUM,0, ITEM, FZ
								*GET,F_NORM,FSUM,0, ITEM, FX
								*GET,F_TAN2,FSUM,0, ITEM, FY
							*ELSE
								ESLN
								ESEL,R,REAL,,1152
								ESEL,R,CENT,Z,-0.2,-0.004
								NSLE
								FSUM,RSYS,CONT
								*GET,F_TAN1,FSUM,0, ITEM, FY
								*GET,F_NORM,FSUM,0, ITEM, FZ
								*GET,F_TAN2,FSUM,0, ITEM, FX
							*ENDIF
						*ENDIF
						

						!--------------------------------
						! Write Forces on file
						!
						UIOIS(k,j,i)=-F_NORM
						UIOIS(k,j,i+2)=-F_TAN1
						UIOIS(k,j,i+4)=-F_TAN2
					*ENDDO

					!===========================================================================
					!===========================================================================
					! LOWER INTERMIDIATE OIS
					!===========================================================================
					!===========================================================================
					
					*DO, k, 1, 7

						!--------------------------------
						! SET ANGLE
						!
						*IF, k, EQ, 1, THEN
							
							*IF, i, EQ, 1, THEN
								Cname = 'TF1_IOIS_DOWN_PLATES'
							*ELSE
								Cname = 'TF2_IOIS_DOWN_PLATES'
							*ENDIF
						*ELSE
							Cname = C_LIOIS_%i%(k)
						*ENDIF
						!--------------------------------
						! Select entityt set
						!
						LCSYS = S_LIOIS_%i%(k)
						
						CMSEL, S, Cname
						NSLE, S
						CSYS,LCSYS
						RSYS,LCSYS
						*IF,i,EQ,1,THEN
							*IF,k,EQ,1,THEN
								NSEL,R,LOC,Z,0.01,0.3
								FSUM,RSYS
								*GET,F_TAN1,FSUM,0, ITEM, FZ
								*GET,F_NORM,FSUM,0, ITEM, FX
								*GET,F_TAN2,FSUM,0, ITEM, FY
							*ELSE
								ESLN
								ESEL,R,REAL,,1154
								ESEL,R,CENT,Z,-0.2,-0.004
								NSLE
								FSUM,RSYS,CONT
								*GET,F_TAN1,FSUM,0, ITEM, FY
								*GET,F_NORM,FSUM,0, ITEM, FZ
								*GET,F_TAN2,FSUM,0, ITEM, FX
							*ENDIF
						*ELSEIF,i,EQ,2,THEN
							*IF,k,EQ,1,THEN
								NSEL,R,LOC,Z,-0.002,0.005
								FSUM,RSYS
								*GET,F_TAN1,FSUM,0, ITEM, FZ
								*GET,F_NORM,FSUM,0, ITEM, FX
								*GET,F_TAN2,FSUM,0, ITEM, FY
							*ELSE
								ESLN
								ESEL,R,REAL,,1154
								ESEL,R,CENT,Z,-0.2,-0.004
								NSLE
								FSUM,RSYS,CONT
								*GET,F_TAN1,FSUM,0, ITEM, FY
								*GET,F_NORM,FSUM,0, ITEM, FZ
								*GET,F_TAN2,FSUM,0, ITEM, FX
							*ENDIF
						*ENDIF
						

						!--------------------------------
						! Write forces on file
						!
						LIOIS(k,j,i)=-F_NORM
						LIOIS(k,j,i+2)=-F_TAN1
						LIOIS(k,j,i+4)=-F_TAN2
					*ENDDO

					!===========================================================================
					!===========================================================================
					! UPPER M80 BOLTS
					!
					ESEL,S,TYPE,,75
					CM,etmp,ELEM
					*DO, k, 1, 12
						CMSEL,S,etmp
						!--------------------------------
						! Select bolt geometry
						!
						CSYS,1
						ESEL,R,CENT,Y,20*i-25,20*i-15
						NSLE
						*GET,ntmpx,NODE,,MNLOC,X
						*GET,ntmpy,NODE,,MNLOC,Y
						*GET,ntmpz,NODE,,MXLOC,Z
						nN=NODE(ntmpx,ntmpy,ntmpz)
						NSEL,S,NODE,,nN
						*DO,z,1,10
							ESLN
							NSLE
						*ENDDO
						CM,btmp,ELEM
						NSEL,S,NODE,,nN
						*DO,z,1,6
							ESLN
							ESEL,U,ENAM,,179
							NSLE
						*ENDDO
						!--------------------------------
						! COMPUTE FORCE ON BOLT
						!
						*GET,ntmpz,NODE,,MNLOC,Z
						NSEL,R,LOC,Z,ntmpz
						RSYS,0
						FSUM,RSYS
						*GET,F_NORM, FSUM, 0, ITEM, FZ
						*GET,F_TAN1, FSUM, 0, ITEM, FX
						*GET,F_TAN2, FSUM, 0, ITEM, FY
						F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)

						!--------------------------------
						! Write integrated Stress on file
						!
						UM80(k,j,i)=F_NORM
						UM80(k,j,i+2)=F_TAN
						
						CMSEL,S,etmp
						CMSEL,U,btmp
						CM,etmp,ELEM
					*ENDDO


					!===========================================================================
					!===========================================================================
					! UPPER M60 BOLTS
					!
					ESEL,S,TYPE,,76
					CM,etmp,ELEM
					*DO, k, 1, 12	
						CMSEL,S,etmp
						!--------------------------------
						! Select bolt geometry
						!
						CSYS,1
						ESEL,R,CENT,Y,20*i-25,20*i-15
						NSLE
						*GET,ntmpx,NODE,,MXLOC,X
						*GET,ntmpy,NODE,,MNLOC,Y
						*GET,ntmpz,NODE,,MXLOC,Z
						nN=NODE(ntmpx,ntmpy,ntmpz)
						NSEL,S,NODE,,nN
						*DO,z,1,10
							ESLN
							NSLE
						*ENDDO
						CM,btmp,ELEM
						NSEL,S,NODE,,nN
						*DO,z,1,6
							ESLN
							ESEL,U,ENAM,,179
							NSLE
						*ENDDO
						!--------------------------------
						! COMPUTE FORCE ON BOLT
						!
						*GET,ntmpz,NODE,,MNLOC,Z
						NSEL,R,LOC,Z,ntmpz
						RSYS,0
						FSUM,RSYS
						*GET,F_NORM, FSUM, 0, ITEM, FZ
						*GET,F_TAN1, FSUM, 0, ITEM, FX
						*GET,F_TAN2, FSUM, 0, ITEM, FY
						F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)

						!--------------------------------
						! Write integrated Stress on file
						!
						UM60(k,j,i)=F_NORM
						UM60(k,j,i+2)=F_TAN
						
						CMSEL,S,etmp
						CMSEL,U,btmp
						CM,etmp,ELEM
					*ENDDO


					!===========================================================================
					!===========================================================================
					! LOWER M85 BOLTS
					!
					ESEL,S,TYPE,,77
					CM,etmp,ELEM
					*DO, k, 1, 12	
						CMSEL,S,etmp
						!--------------------------------
						! Select bolt geometry
						!
						CSYS,1
						ESEL,R,CENT,Y,20*i-25,20*i-15
						NSLE
						*GET,ntmpx,NODE,,MNLOC,X
						*GET,ntmpy,NODE,,MNLOC,Y
						*GET,ntmpz,NODE,,MXLOC,Z
						nN=NODE(ntmpx,ntmpy,ntmpz)
						NSEL,S,NODE,,nN
						*DO,z,1,10
							ESLN
							NSLE
						*ENDDO
						CM,btmp,ELEM
						NSEL,S,NODE,,nN
						*DO,z,1,6
							ESLN
							ESEL,U,ENAM,,179
							NSLE
						*ENDDO
						!--------------------------------
						! COMPUTE FORCE ON BOLT
						!
						*GET,ntmpz,NODE,,MNLOC,Z
						NSEL,R,LOC,Z,ntmpz
						RSYS,0
						FSUM,RSYS
						*GET,F_NORM, FSUM, 0, ITEM, FZ
						*GET,F_TAN1, FSUM, 0, ITEM, FX
						*GET,F_TAN2, FSUM, 0, ITEM, FY
						F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)

						!--------------------------------
						! Write integrated Stress on file
						!
						LM85(k,j,i)=F_NORM
						LM85(k,j,i+2)=F_TAN
						
						CMSEL,S,etmp
						CMSEL,U,btmp
						CM,etmp,ELEM
					*ENDDO	

					!===========================================================================
					!===========================================================================
					! LOWER M60 BOLTS
					!
					ESEL,S,TYPE,,78
					CM,etmp,ELEM
					*DO, k, 1, 14	
						CMSEL,S,etmp
						!--------------------------------
						! Select bolt geometry
						!
						CSYS,1
						ESEL,R,CENT,Y,20*i-25,20*i-15
						NSLE
						*GET,ntmpx,NODE,,MXLOC,X
						NSEL,R,LOC,X,ntmpx-0.5,ntmpx+0.5
						*GET,ntmpy,NODE,,MNLOC,Y
						*GET,ntmpz,NODE,,MXLOC,Z
						nN=NODE(ntmpx,ntmpy,ntmpz)
						NSEL,S,NODE,,nN
						*DO,z,1,10
							ESLN
							NSLE
						*ENDDO
						CM,btmp,ELEM
						NSEL,S,NODE,,nN
						*DO,z,1,6
							ESLN
							ESEL,U,ENAM,,179
							NSLE
						*ENDDO
						!--------------------------------
						! COMPUTE FORCE ON BOLT
						!
						*GET,ntmpz,NODE,,MNLOC,Z
						NSEL,R,LOC,Z,ntmpz
						RSYS,0
						FSUM,RSYS
						*GET,F_NORM, FSUM, 0, ITEM, FZ
						*GET,F_TAN1, FSUM, 0, ITEM, FX
						*GET,F_TAN2, FSUM, 0, ITEM, FY
						F_TAN=SQRT(F_TAN1*F_TAN1+F_TAN2*F_TAN2)

						!--------------------------------
						! Write integrated Stress on file
						!
						LM60(k,j,i)=F_NORM
						LM60(k,j,i+2)=F_TAN
						
						CMSEL,S,etmp
						CMSEL,U,btmp
						CM,etmp,ELEM
					*ENDDO		
		
					!===========================================================================
					!===========================================================================
					! PCR RINGS
					!===========================================================================
					!===========================================================================

					!--------------------------------
					! LOOP ON DIFFERENT rings
					!
					CSYS,1
					RSYS,1
					*DO, k, 1, 6

						!===========================================================================
						! LOOP ON PADS
						!
						CMSEL, S, E_RING_%k%
						NSLE, S
						NSEL,R,LOC,Y,-1+(i-1)*20,1+(i-1)*20
						ESEL,R,CENT,Y,(i-1)*20,10+(i-1)*20

						!===========================================================================
						! FORCE SUMMATION
						!
						FSUM,RSYS
						*GET,F_TOR, FSUM, 0, ITEM, FY

						!===========================================================================
						! Write integrated Stress on file
						!
						PCR_RING(k,j,i)=F_TOR
					*ENDDO	

					!===========================================================================
					!===========================================================================
					! TF WP FORCE AND MOMENT SUM
					!===========================================================================
					!===========================================================================
					*AFUN, DEG
					!===========================================================================
					! Select Components
					!
					CMSEL, NONE
					NSEL, NONE
					ESEL, NONE
				
					!======================================
					! ONLY TYPE B
					!		
					*IF, 	i, EQ, 1, THEN
						CMSEL,S, TF1_WP
						alfa = 0
					!======================================
					! ONLY TYPE A
					!
					*ELSEIF,i, EQ, 2, THEN
						CMSEL,S, TF2_WP
						alfa = 20
					*ENDIF
					NSLE, S

					!===========================================================================
					! COMPUTE TOTAL FORCES BY LOOPING ON NODES
					!
					*GET,nN,NODE,,COUNT
					*GET,iN,NODE,,NUM,MIN
		
					RforceX=0
					RforceY=0
					RforceZ=0
					MXtot = 0
					MYtot = 0
					MZtot = 0

					MRtot = 0
					MTtot = 0
					MPtot = 0

					CSYS, 0
			
					*DO,m,1,nN
						*GET, LFX, NODE, iN, F, FX
						*GET, LFY, NODE, iN, F, FY
						*GET, LFZ, NODE, iN, F, FZ
						XiN=NX(iN)
						YiN=NY(iN)
						ZiN=NZ(iN)
					
						MXtot = MXtot+LFZ*YiN-LFY*ZiN
						MYtot = MYtot+LFX*ZiN-LFZ*XiN
						MZtot = MZtot+LFY*XiN-LFX*YiN
						RforceX=RforceX+LFX
						RforceY=RforceY+LFY
						RforceZ=RforceZ+LFZ
										
						*GET,iNnew,NODE,iN,NXTH
						iN=iNnew
					*ENDDO
		
					TFLOAD(j,1,i) = RforceX*COS(alfa) + RforceY*SIN(alfa)
					TFLOAD(j,2,i) = -RforceX*SIN(alfa) + RforceY*COS(alfa) 
					TFLOAD(j,3,i) = RforceZ
					TFLOAD(j,4,i) = MXtot*COS(alfa) + MYtot*SIN(alfa)
					TFLOAD(j,5,i) = - MXtot*SIN(alfa) + MYtot*COS(alfa)
					TFLOAD(j,6,i) = MZtot
				*ENDDO		
			*ENDIF
		*ENDDO
	FINISH
	!===============================================================================
	! SAVE DB
	!
	SAVE, , , ,MODEL
	
	!===============================================================================
	! OUPUT
	!
	*DO, i, Coil_1, Coil_2
		!----------------------------------------------------------------------------
		!----------------------------------------------------------------------------
		! WRITE OUTPUT FILES FOR TYPE B
		!----------------------------------------------------------------------------
		!----------------------------------------------------------------------------
		*IF, i, EQ, 1, THEN
		
			!----------------------------------------------------------------------------
			! WP OPEN AND WRITE OUTPUT FILE	FOR DISPLACEMENTS
			!
			*CFOPEN, '../_OUTPUT/TF1_WP_RADIAL', displ
	 
				*VWRITE,
WP RADIAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  WP_DISPL(1,1,1),WP_COOR(1,1,1),WP_COOR(1,1,3),WP_COOR(1,1,5),WP_DISPL(1,2,1),WP_DISPL(1,3,1),WP_DISPL(1,4,1),WP_DISPL(1,5,1),WP_DISPL(1,6,1),WP_DISPL(1,7,1),WP_DISPL(1,8,1),WP_DISPL(1,9,1),WP_DISPL(1,10,1),WP_DISPL(1,11,1),WP_DISPL(1,12,1),WP_DISPL(1,13,1),WP_DISPL(1,14,1),WP_DISPL(1,15,1),WP_DISPL(1,16,1),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF1_WP_TOROIDAL', displ
				*VWRITE, 
WP TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  WP_DISPL(1,1,3),WP_COOR(1,1,1),WP_COOR(1,1,3),WP_COOR(1,1,5),WP_DISPL(1,2,3),WP_DISPL(1,3,3),WP_DISPL(1,4,3),WP_DISPL(1,5,3),WP_DISPL(1,6,3),WP_DISPL(1,7,3),WP_DISPL(1,8,3),WP_DISPL(1,9,3),WP_DISPL(1,10,3),WP_DISPL(1,11,3),WP_DISPL(1,12,3),WP_DISPL(1,13,3),WP_DISPL(1,14,3),WP_DISPL(1,15,3),WP_DISPL(1,16,3),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF1_WP_VERTICAL', displ
				*VWRITE,
WP VERTICAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  WP_DISPL(1,1,5),WP_COOR(1,1,1),WP_COOR(1,1,3),WP_COOR(1,1,5),WP_DISPL(1,2,5),WP_DISPL(1,3,5),WP_DISPL(1,4,5),WP_DISPL(1,5,5),WP_DISPL(1,6,5),WP_DISPL(1,7,5),WP_DISPL(1,8,5),WP_DISPL(1,9,5),WP_DISPL(1,10,5),WP_DISPL(1,11,5),WP_DISPL(1,12,5),WP_DISPL(1,13,5),WP_DISPL(1,14,5),WP_DISPL(1,15,5), WP_DISPL(1,16,5),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
			*CFCLOSE

			!----------------------------------------------------------------------------
			! INTERNAL CASE OPEN AND WRITE OUTPUT FILE
			!
			*CFOPEN, '../_OUTPUT/TF1_INT_CASE_RADIAL', displ

				*VWRITE,  
INTERNAL CASE RADIAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  INT_CASE_DISPL(1,1,1),INT_CASE_COOR(1,1,1),INT_CASE_COOR(1,1,3),INT_CASE_COOR(1,1,5),INT_CASE_DISPL(1,2,1),INT_CASE_DISPL(1,3,1),INT_CASE_DISPL(1,4,1),INT_CASE_DISPL(1,5,1),INT_CASE_DISPL(1,6,1),INT_CASE_DISPL(1,7,1),INT_CASE_DISPL(1,8,1),INT_CASE_DISPL(1,9,1),INT_CASE_DISPL(1,10,1),INT_CASE_DISPL(1,11,1),INT_CASE_DISPL(1,12,1),INT_CASE_DISPL(1,13,1),INT_CASE_DISPL(1,14,1), INT_CASE_DISPL(1,15,1),INT_CASE_DISPL(1,16,1),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF1_INT_CASE_TOROIDAL', displ
				*VWRITE,  
INTERNAL CASE TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  INT_CASE_DISPL(1,1,3),INT_CASE_COOR(1,1,1),INT_CASE_COOR(1,1,3),INT_CASE_COOR(1,1,5),INT_CASE_DISPL(1,2,3),INT_CASE_DISPL(1,3,3),INT_CASE_DISPL(1,4,3),INT_CASE_DISPL(1,5,3),INT_CASE_DISPL(1,6,3),INT_CASE_DISPL(1,7,3),INT_CASE_DISPL(1,8,3),INT_CASE_DISPL(1,9,3),INT_CASE_DISPL(1,10,3),INT_CASE_DISPL(1,11,3),INT_CASE_DISPL(1,12,3),INT_CASE_DISPL(1,13,3),INT_CASE_DISPL(1,14,3), INT_CASE_DISPL(1,15,3),INT_CASE_DISPL(1,16,3),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
			*CFCLOSE
			
			*CFOPEN, '../_OUTPUT/TF1_INT_CASE_VERTICAL', displ
				*VWRITE,
INTERNAL CASE VERTICAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  INT_CASE_DISPL(1,1,5),INT_CASE_COOR(1,1,1),INT_CASE_COOR(1,1,3),INT_CASE_COOR(1,1,5),INT_CASE_DISPL(1,2,5),INT_CASE_DISPL(1,3,5),INT_CASE_DISPL(1,4,5),INT_CASE_DISPL(1,5,5),INT_CASE_DISPL(1,6,5),INT_CASE_DISPL(1,7,5),INT_CASE_DISPL(1,8,5),INT_CASE_DISPL(1,9,5),INT_CASE_DISPL(1,10,5),INT_CASE_DISPL(1,11,5),INT_CASE_DISPL(1,12,5),INT_CASE_DISPL(1,13,5),INT_CASE_DISPL(1,14,5),INT_CASE_DISPL(1,15,5),INT_CASE_DISPL(1,16,5),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

			*CFCLOSE
		
			!----------------------------------------------------------------------------
			! EXTERNAL CASE OPEN AND WRITE OUTPUT FILE
			!
			*CFOPEN, '../_OUTPUT/TF1_EXT_CASE_RADIAL', displ

				*VWRITE,
EXTERNAL CASE RADIAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  EXT_CASE_DISPL(1,1,1),EXT_CASE_COOR(1,1,1),EXT_CASE_COOR(1,1,3),EXT_CASE_COOR(1,1,5),EXT_CASE_DISPL(1,2,1),EXT_CASE_DISPL(1,3,1),EXT_CASE_DISPL(1,4,1),EXT_CASE_DISPL(1,5,1),EXT_CASE_DISPL(1,6,1),EXT_CASE_DISPL(1,7,1),EXT_CASE_DISPL(1,8,1),EXT_CASE_DISPL(1,9,1),EXT_CASE_DISPL(1,10,1),EXT_CASE_DISPL(1,11,1),EXT_CASE_DISPL(1,12,1),EXT_CASE_DISPL(1,13,1),EXT_CASE_DISPL(1,14,1),EXT_CASE_DISPL(1,15,1),EXT_CASE_DISPL(1,16,1),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE
			
			*CFOPEN, '../_OUTPUT/TF1_EXT_CASE_TOROIDAL', displ
				*VWRITE,  
EXTERNAL CASE TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  EXT_CASE_DISPL(1,1,3),EXT_CASE_COOR(1,1,1),EXT_CASE_COOR(1,1,3),EXT_CASE_COOR(1,1,5),EXT_CASE_DISPL(1,2,3),EXT_CASE_DISPL(1,3,3),EXT_CASE_DISPL(1,4,3),EXT_CASE_DISPL(1,5,3),EXT_CASE_DISPL(1,6,3),EXT_CASE_DISPL(1,7,3),EXT_CASE_DISPL(1,8,3),EXT_CASE_DISPL(1,9,3),EXT_CASE_DISPL(1,10,3),EXT_CASE_DISPL(1,11,3),EXT_CASE_DISPL(1,12,3),EXT_CASE_DISPL(1,13,3),EXT_CASE_DISPL(1,14,3),EXT_CASE_DISPL(1,15,3),EXT_CASE_DISPL(1,16,3),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF1_EXT_CASE_VERTICAL', displ
				*VWRITE,  
EXTERNAL CASE VERTICAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  EXT_CASE_DISPL(1,1,5),EXT_CASE_COOR(1,1,1),EXT_CASE_COOR(1,1,3),EXT_CASE_COOR(1,1,5),EXT_CASE_DISPL(1,2,5),EXT_CASE_DISPL(1,3,5),EXT_CASE_DISPL(1,4,5),EXT_CASE_DISPL(1,5,5),EXT_CASE_DISPL(1,6,5),EXT_CASE_DISPL(1,7,5),EXT_CASE_DISPL(1,8,5),EXT_CASE_DISPL(1,9,5),EXT_CASE_DISPL(1,10,5),EXT_CASE_DISPL(1,11,5),EXT_CASE_DISPL(1,12,5),EXT_CASE_DISPL(1,13,5),EXT_CASE_DISPL(1,14,5),EXT_CASE_DISPL(1,15,5),EXT_CASE_DISPL(1,16,5),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
			*CFCLOSE
	!----------------------------------------------------------------------------
		! WEDGE OPEN AND WRITE OUTPUT FILE
		!
		*CFOPEN, '../_OUTPUT/TF1_WEDGE_FORCES', force

			*VWRITE,  
WEDGE TOROIDAL FORCES [N]
			*VWRITE,  LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)  
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  WEDGE(1,1,1),WEDGE(1,2,1),WEDGE(1,3,1),WEDGE(1,4,1),WEDGE(1,5,1),WEDGE(1,6,1),WEDGE(1,7,1),WEDGE(1,8,1),WEDGE(1,9,1),WEDGE(1,10,1),WEDGE(1,11,1),WEDGE(1,12,1),WEDGE(1,13,1),WEDGE(1,14,1),WEDGE(1,15,1),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
		*CFCLOSE

		!----------------------------------------------------------------------------
		! SUPPORT OPEN AND WRITE OUTPUT FILE
		!
		*CFOPEN, '../_OUTPUT/TF1_BEARING_FORCES', force
 
                         *VWRITE,
BEARING FORCES [N] AND MOMENTS [Nm]
			*VWRITE,  LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  GS_SUP(1,1,1),GS_SUP(1,2,1),GS_SUP(1,3,1),GS_SUP(1,4,1),GS_SUP(1,5,1),GS_SUP(1,6,1),GS_SUP(1,7,1),GS_SUP(1,8,1),GS_SUP(1,9,1),GS_SUP(1,10,1),GS_SUP(1,11,1),GS_SUP(1,12,1),GS_SUP(1,13,1),GS_SUP(1,14,1),GS_SUP(1,15,1),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE
		
		!----------------------------------------------------------------------------
		! CRYOSTAT RING OPEN AND WRITE OUTPUT FILE
		!
		*CFOPEN, '../_OUTPUT/TF1_CRYO_FORCES', force
 
                        *VWRITE,
CRYO-RING TOROIDAL FORCES [N]
			*VWRITE,  LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  GS(1,1,1),GS(1,2,1),GS(1,3,1),GS(1,4,1),GS(1,5,1),GS(1,6,1),GS(1,7,1),GS(1,8,1),GS(1,9,1),GS(1,10,1),GS(1,11,1),GS(1,12,1),GS(1,13,1),GS(1,14,1),GS(1,15,1),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! UOIS
		!
		*CFOPEN, '../_OUTPUT/TF1_UOIS_FORCES', force

			*VWRITE, 
UOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UOIS_1(1), UOIS(1,1,1),UOIS(1,2,1),UOIS(1,3,1),UOIS(1,4,1),UOIS(1,5,1),UOIS(1,6,1),UOIS(1,7,1),UOIS(1,8,1),UOIS(1,9,1),UOIS(1,10,1),UOIS(1,11,1),UOIS(1,12,1), UOIS(1,13,1), UOIS(1,14,1), UOIS(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
UOIS SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UOIS_1(1), UOIS(1,1,3),UOIS(1,2,3),UOIS(1,3,3),UOIS(1,4,3),UOIS(1,5,3),UOIS(1,6,3),UOIS(1,7,3),UOIS(1,8,3),UOIS(1,9,3),UOIS(1,10,3),UOIS(1,11,3),UOIS(1,12,3), UOIS(1,13,3), UOIS(1,14,3), UOIS(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! LOIS
		!
		*CFOPEN, '../_OUTPUT/TF1_LOIS_FORCES', force

			*VWRITE,
LOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LOIS_1(1), LOIS(1,1,1),LOIS(1,2,1),LOIS(1,3,1),LOIS(1,4,1),LOIS(1,5,1),LOIS(1,6,1),LOIS(1,7,1),LOIS(1,8,1),LOIS(1,9,1),LOIS(1,10,1),LOIS(1,11,1),LOIS(1,12,1), LOIS(1,13,1), LOIS(1,14,1), LOIS(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LOIS SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LOIS_1(1), LOIS(1,1,3),LOIS(1,2,3),LOIS(1,3,3),LOIS(1,4,3),LOIS(1,5,3),LOIS(1,6,3),LOIS(1,7,3),LOIS(1,8,3),LOIS(1,9,3),LOIS(1,10,3),LOIS(1,11,3),LOIS(1,12,3), LOIS(1,13,3), LOIS(1,14,3), LOIS(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! UIOIS
		!
		*CFOPEN, '../_OUTPUT/TF1_UIOIS_FORCES', force

			*VWRITE,
UIOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UIOIS_1(1), UIOIS(1,1,1),UIOIS(1,2,1),UIOIS(1,3,1),UIOIS(1,4,1),UIOIS(1,5,1),UIOIS(1,6,1),UIOIS(1,7,1),UIOIS(1,8,1),UIOIS(1,9,1),UIOIS(1,10,1),UIOIS(1,11,1),UIOIS(1,12,1), UIOIS(1,13,1), UIOIS(1,14,1), UIOIS(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
UIOIS TOROIDAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UIOIS_1(1), UIOIS(1,1,3),UIOIS(1,2,3),UIOIS(1,3,3),UIOIS(1,4,3),UIOIS(1,5,3),UIOIS(1,6,3),UIOIS(1,7,3),UIOIS(1,8,3),UIOIS(1,9,3),UIOIS(1,10,3),UIOIS(1,11,3),UIOIS(1,12,3), UIOIS(1,13,3), UIOIS(1,14,3), UIOIS(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
UIOIS VERTICAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UIOIS_1(1), UIOIS(1,1,5),UIOIS(1,2,5),UIOIS(1,3,5),UIOIS(1,4,5),UIOIS(1,5,5),UIOIS(1,6,5),UIOIS(1,7,5),UIOIS(1,8,5),UIOIS(1,9,5),UIOIS(1,10,5),UIOIS(1,11,5),UIOIS(1,12,5), UIOIS(1,13,5), UIOIS(1,14,5), UIOIS(1,15,5)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! LIOIS
		!
		*CFOPEN, '../_OUTPUT/TF1_LIOIS_FORCES', force

			*VWRITE,
LIOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LIOIS_1(1), LIOIS(1,1,1),LIOIS(1,2,1),LIOIS(1,3,1),LIOIS(1,4,1),LIOIS(1,5,1),LIOIS(1,6,1),LIOIS(1,7,1),LIOIS(1,8,1),LIOIS(1,9,1),LIOIS(1,10,1),LIOIS(1,11,1),LIOIS(1,12,1), LIOIS(1,13,1) , LIOIS(1,14,1), LIOIS(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LIOIS TOROIDAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LIOIS_1(1), LIOIS(1,1,3),LIOIS(1,2,3),LIOIS(1,3,3),LIOIS(1,4,3),LIOIS(1,5,3),LIOIS(1,6,3),LIOIS(1,7,3),LIOIS(1,8,3),LIOIS(1,9,3),LIOIS(1,10,3),LIOIS(1,11,3),LIOIS(1,12,3), LIOIS(1,13,3), LIOIS(1,14,3), LIOIS(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LIOIS VERTICAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LIOIS_1(1), LIOIS(1,1,5),LIOIS(1,2,5),LIOIS(1,3,5),LIOIS(1,4,5),LIOIS(1,5,5),LIOIS(1,6,5),LIOIS(1,7,5),LIOIS(1,8,5),LIOIS(1,9,5),LIOIS(1,10,5),LIOIS(1,11,5),LIOIS(1,12,5), LIOIS(1,13,5), LIOIS(1,14,5), LIOIS(1,15,5)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! GS UM80 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF1_UM80_FORCES', force

			*VWRITE,
UM80 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM80_1(1), UM80(1,1,1),UM80(1,2,1),UM80(1,3,1),UM80(1,4,1),UM80(1,5,1),UM80(1,6,1),UM80(1,7,1),UM80(1,8,1),UM80(1,9,1),UM80(1,10,1),UM80(1,11,1),UM80(1,12,1), UM80(1,13,1), UM80(1,14,1), UM80(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
UM80 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM80_1(1), UM80(1,1,3),UM80(1,2,3),UM80(1,3,3),UM80(1,4,3),UM80(1,5,3),UM80(1,6,3),UM80(1,7,3),UM80(1,8,3),UM80(1,9,3),UM80(1,10,3),UM80(1,11,3),UM80(1,12,3), UM80(1,13,3), UM80(1,14,3), UM80(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! GS UM60 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF1_UM60_FORCES', force

			*VWRITE,
UM60 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM60_1(1), UM60(1,1,1),UM60(1,2,1),UM60(1,3,1),UM60(1,4,1),UM60(1,5,1),UM60(1,6,1),UM60(1,7,1),UM60(1,8,1),UM60(1,9,1),UM60(1,10,1),UM60(1,11,1),UM60(1,12,1), UM60(1,13,1), UM60(1,14,1), UM60(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
UM60 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM60_1(1), UM60(1,1,3),UM60(1,2,3),UM60(1,3,3),UM60(1,4,3),UM60(1,5,3),UM60(1,6,3),UM60(1,7,3),UM60(1,8,3),UM60(1,9,3),UM60(1,10,3),UM60(1,11,3),UM60(1,12,3), UM60(1,13,3), UM60(1,14,3), UM60(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! GS LM85 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF1_LM85_FORCES', force

			*VWRITE,
LM85 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM85_1(1), LM85(1,1,1),LM85(1,2,1),LM85(1,3,1),LM85(1,4,1),LM85(1,5,1),LM85(1,6,1),LM85(1,7,1),LM85(1,8,1),LM85(1,9,1),LM85(1,10,1),LM85(1,11,1),LM85(1,12,1), LM85(1,13,1), LM85(1,14,1), LM85(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LM85 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM85_1(1), LM85(1,1,3),LM85(1,2,3),LM85(1,3,3),LM85(1,4,3),LM85(1,5,3),LM85(1,6,3),LM85(1,7,3),LM85(1,8,3),LM85(1,9,3),LM85(1,10,3),LM85(1,11,3),LM85(1,12,3), LM85(1,13,3), LM85(1,14,3), LM85(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! GS LM60 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF1_LM60_FORCES', force

			*VWRITE,
LM60 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM60_1(1), LM60(1,1,1),LM60(1,2,1),LM60(1,3,1),LM60(1,4,1),LM60(1,5,1),LM60(1,6,1),LM60(1,7,1),LM60(1,8,1),LM60(1,9,1),LM60(1,10,1),LM60(1,11,1),LM60(1,12,1), LM60(1,13,1), LM60(1,14,1), LM60(1,15,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LM60 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM60_1(1), LM60(1,1,3),LM60(1,2,3),LM60(1,3,3),LM60(1,4,3),LM60(1,5,3),LM60(1,6,3),LM60(1,7,3),LM60(1,8,3),LM60(1,9,3),LM60(1,10,3),LM60(1,11,3),LM60(1,12,3), LM60(1,13,3), LM60(1,14,3), LM60(1,15,3)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! shear keys TOROIDAL FORCE
		!
		*CFOPEN, '../_OUTPUT/TF1_IIS_TOROIDAL', force

			*VWRITE,
SHEAR KEYS FORCES [N]
			*VWRITE,  'NAME','LENGHT',LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%7C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  IIS_NAMES(1), IIS_FORCES(1,1,1),IIS_FORCES(1,2,1),IIS_FORCES(1,3,1),IIS_FORCES(1,4,1),IIS_FORCES(1,5,1),IIS_FORCES(1,6,1),IIS_FORCES(1,7,1),IIS_FORCES(1,8,1),IIS_FORCES(1,9,1),IIS_FORCES(1,10,1),IIS_FORCES(1,11,1),IIS_FORCES(1,12,1),IIS_FORCES(1,13,1),IIS_FORCES(1,14,1),IIS_FORCES(1,15,1),IIS_FORCES(1,16,1)
%7C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E  %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! shear keys SHEAR FORCE
		!
		*CFOPEN, '../_OUTPUT/TF1_IIS_SHEAR', force

			*VWRITE,
SHEAR KEYS FORCES [N]
			*VWRITE,  'NAME','LENGHT',LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%7C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  IIS_NAMES(1), IIS_FORCES(1,1,3),IIS_FORCES(1,2,3),IIS_FORCES(1,3,3),IIS_FORCES(1,4,3),IIS_FORCES(1,5,3),IIS_FORCES(1,6,3),IIS_FORCES(1,7,3),IIS_FORCES(1,8,3),IIS_FORCES(1,9,3),IIS_FORCES(1,10,3),IIS_FORCES(1,11,3),IIS_FORCES(1,12,3),IIS_FORCES(1,13,3),IIS_FORCES(1,14,3),IIS_FORCES(1,15,3),IIS_FORCES(1,16,3)
%7C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! PCR_RING
		!!
		*CFOPEN, '../_OUTPUT/TF1_PCR_RING', force

			*VWRITE,
PCR RING TOROIDAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%7C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_PCR_RING(1), PCR_RING(1,1,1),PCR_RING(1,2,1),PCR_RING(1,3,1),PCR_RING(1,4,1),PCR_RING(1,5,1),PCR_RING(1,6,1),PCR_RING(1,7,1),PCR_RING(1,8,1),PCR_RING(1,9,1),PCR_RING(1,10,1),PCR_RING(1,11,1),PCR_RING(1,12,1), PCR_RING(1,13,1), PCR_RING(1,14,1), PCR_RING(1,15,1)
%7C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE
		
		!----------------------------------------------------------------------------
		! TF FORCE + MOMENT
		!!
		*CFOPEN, '../_OUTPUT/TF1_FSUM', force

			*VWRITE,
FORCES [N] AND MOMENTS [Nm] FOR TF1 WP
			*VWRITE,  'Scenario', 'FR [N]', 'FT [N]', 'FV [N]', 'MR [Nm]', 'MT [Nm]', 'MP [Nm]
%10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  LOAD(1), TFLOAD(1,1,1),TFLOAD(1,2,1),TFLOAD(1,3,1),TFLOAD(1,4,1),TFLOAD(1,5,1),TFLOAD(1,6,1)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

!----------------------------------------------------------------------------
!----------------------------------------------------------------------------
! WRITE OUTPUT FILES FOR TYPE A
!----------------------------------------------------------------------------
!----------------------------------------------------------------------------
!
	*ELSE
			!----------------------------------------------------------------------------
			! WP OPEN AND WRITE OUTPUT FILE	FOR DISPLACEMENTS
			!
			*CFOPEN, '../_OUTPUT/TF2_WP_RADIAL', displ

				*VWRITE,
WP RADIAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  WP_DISPL(1,1,2),WP_COOR(1,1,2),WP_COOR(1,1,4),WP_COOR(1,1,6),WP_DISPL(1,2,2),WP_DISPL(1,3,2),WP_DISPL(1,4,2),WP_DISPL(1,5,2),WP_DISPL(1,6,2),WP_DISPL(1,7,2),WP_DISPL(1,8,2),WP_DISPL(1,9,2),WP_DISPL(1,10,2),WP_DISPL(1,11,2),WP_DISPL(1,12,2),WP_DISPL(1,13,2),WP_DISPL(1,14,2),WP_DISPL(1,15,2),WP_DISPL(1,16,2),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF2_WP_TOROIDAL', displ
				*VWRITE,
WP TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  WP_DISPL(1,1,4),WP_COOR(1,1,2),WP_COOR(1,1,4),WP_COOR(1,1,6),WP_DISPL(1,2,4),WP_DISPL(1,3,4),WP_DISPL(1,4,4),WP_DISPL(1,5,4),WP_DISPL(1,6,4),WP_DISPL(1,7,4),WP_DISPL(1,8,4),WP_DISPL(1,9,4),WP_DISPL(1,10,4),WP_DISPL(1,11,4),WP_DISPL(1,12,4),WP_DISPL(1,13,4),WP_DISPL(1,14,4),WP_DISPL(1,15,4),WP_DISPL(1,16,4),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF2_WP_VERTICAL', displ
				*VWRITE,
WP VERTICAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  WP_DISPL(1,1,6),WP_COOR(1,1,2),WP_COOR(1,1,4),WP_COOR(1,1,6),WP_DISPL(1,2,6),WP_DISPL(1,3,6),WP_DISPL(1,4,6),WP_DISPL(1,5,6),WP_DISPL(1,6,6),WP_DISPL(1,7,6),WP_DISPL(1,8,6),WP_DISPL(1,9,6),WP_DISPL(1,10,6),WP_DISPL(1,11,6),WP_DISPL(1,12,6),WP_DISPL(1,13,6),WP_DISPL(1,14,6),WP_DISPL(1,15,6),WP_DISPL(1,16,6),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

			*CFCLOSE

!----------------------------------------------------------------------------
! INTERNAL CASE OPEN AND WRITE OUTPUT FILE
!
			*CFOPEN, '../_OUTPUT/TF2_INT_CASE_RADIAL', displ

				*VWRITE,
INTERNAL CASE RADIAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  INT_CASE_DISPL(1,1,2),INT_CASE_COOR(1,1,2),INT_CASE_COOR(1,1,4),INT_CASE_COOR(1,1,6),INT_CASE_DISPL(1,2,2),INT_CASE_DISPL(1,3,2),INT_CASE_DISPL(1,4,2),INT_CASE_DISPL(1,5,2),INT_CASE_DISPL(1,6,2),INT_CASE_DISPL(1,7,2),INT_CASE_DISPL(1,8,2),INT_CASE_DISPL(1,9,2),INT_CASE_DISPL(1,10,2),INT_CASE_DISPL(1,11,2),INT_CASE_DISPL(1,12,2),INT_CASE_DISPL(1,13,2),INT_CASE_DISPL(1,14,2),INT_CASE_DISPL(1,15,2),INT_CASE_DISPL(1,16,2),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF2_INT_CASE_TOROIDAL', displ
				*VWRITE,
INTERNAL CASE TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  INT_CASE_DISPL(1,1,4),INT_CASE_COOR(1,1,2),INT_CASE_COOR(1,1,4),INT_CASE_COOR(1,1,6),INT_CASE_DISPL(1,2,4),INT_CASE_DISPL(1,3,4),INT_CASE_DISPL(1,4,4),INT_CASE_DISPL(1,5,4),INT_CASE_DISPL(1,6,4),INT_CASE_DISPL(1,7,4),INT_CASE_DISPL(1,8,4),INT_CASE_DISPL(1,9,4),INT_CASE_DISPL(1,10,4),INT_CASE_DISPL(1,11,4),INT_CASE_DISPL(1,12,4),INT_CASE_DISPL(1,13,4),INT_CASE_DISPL(1,14,4),INT_CASE_DISPL(1,15,4),INT_CASE_DISPL(1,16,4),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF2_INT_CASE_VERTICAL', displ
				*VWRITE,
INTERNAL CASE TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  INT_CASE_DISPL(1,1,6),INT_CASE_COOR(1,1,2),INT_CASE_COOR(1,1,4),INT_CASE_COOR(1,1,6),INT_CASE_DISPL(1,2,6),INT_CASE_DISPL(1,3,6),INT_CASE_DISPL(1,4,6),INT_CASE_DISPL(1,5,6),INT_CASE_DISPL(1,6,6),INT_CASE_DISPL(1,7,6),INT_CASE_DISPL(1,8,6),INT_CASE_DISPL(1,9,6),INT_CASE_DISPL(1,10,6),INT_CASE_DISPL(1,11,6),INT_CASE_DISPL(1,12,6),INT_CASE_DISPL(1,13,6),INT_CASE_DISPL(1,14,6),INT_CASE_DISPL(1,15,6),INT_CASE_DISPL(1,16,6),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

			*CFCLOSE

!----------------------------------------------------------------------------
! EXTERNAL CASE OPEN AND WRITE OUTPUT FILE
!
			*CFOPEN, '../_OUTPUT/TF2_EXT_CASE_RADIAL', displ

				*VWRITE,
EXTERNAL CASE RADIAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13),  LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  EXT_CASE_DISPL(1,1,2),EXT_CASE_COOR(1,1,2),EXT_CASE_COOR(1,1,4),EXT_CASE_COOR(1,1,6),EXT_CASE_DISPL(1,2,2),EXT_CASE_DISPL(1,3,2),EXT_CASE_DISPL(1,4,2),EXT_CASE_DISPL(1,5,2),EXT_CASE_DISPL(1,6,2),EXT_CASE_DISPL(1,7,2),EXT_CASE_DISPL(1,8,2),EXT_CASE_DISPL(1,9,2),EXT_CASE_DISPL(1,10,2),EXT_CASE_DISPL(1,11,2),EXT_CASE_DISPL(1,12,2),EXT_CASE_DISPL(1,13,2),EXT_CASE_DISPL(1,14,2),EXT_CASE_DISPL(1,15,2),EXT_CASE_DISPL(1,16,2),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF2_EXT_CASE_TOROIDAL', displ
				*VWRITE,
EXTERNAL CASE TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  EXT_CASE_DISPL(1,1,4),EXT_CASE_COOR(1,1,2),EXT_CASE_COOR(1,1,4),EXT_CASE_COOR(1,1,6),EXT_CASE_DISPL(1,2,4),EXT_CASE_DISPL(1,3,4),EXT_CASE_DISPL(1,4,4),EXT_CASE_DISPL(1,5,4),EXT_CASE_DISPL(1,6,4),EXT_CASE_DISPL(1,7,4),EXT_CASE_DISPL(1,8,4),EXT_CASE_DISPL(1,9,4),EXT_CASE_DISPL(1,10,4),EXT_CASE_DISPL(1,11,4),EXT_CASE_DISPL(1,12,4),EXT_CASE_DISPL(1,13,4),EXT_CASE_DISPL(1,14,4),EXT_CASE_DISPL(1,15,4),EXT_CASE_DISPL(1,16,4),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

			*CFCLOSE

			*CFOPEN, '../_OUTPUT/TF2_EXT_CASE_VERTICAL', displ
				*VWRITE,
EXTERNAL CASE TOROIDAL DISPL [m]
				*VWRITE,  'ANGLE', 'XCOOR', 'YCOOR', 'ZCOOR', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
				*VWRITE,  EXT_CASE_DISPL(1,1,6),EXT_CASE_COOR(1,1,2),EXT_CASE_COOR(1,1,4),EXT_CASE_COOR(1,1,6),EXT_CASE_DISPL(1,2,6),EXT_CASE_DISPL(1,3,6),EXT_CASE_DISPL(1,4,6),EXT_CASE_DISPL(1,5,6),EXT_CASE_DISPL(1,6,6),EXT_CASE_DISPL(1,7,6),EXT_CASE_DISPL(1,8,6),EXT_CASE_DISPL(1,9,6),EXT_CASE_DISPL(1,10,6),EXT_CASE_DISPL(1,11,6),EXT_CASE_DISPL(1,12,6),EXT_CASE_DISPL(1,13,6),EXT_CASE_DISPL(1,14,6),EXT_CASE_DISPL(1,15,6),EXT_CASE_DISPL(1,16,6),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

			*CFCLOSE

		!----------------------------------------------------------------------------
		! WEDGE OPEN AND WRITE OUTPUT FILE
		!
		*CFOPEN, '../_OUTPUT/TF2_WEDGE_FORCES', force

			*VWRITE,
WEDGE TOROIDAL FORCES [N]
			*VWRITE,  LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  WEDGE(1,1,2),WEDGE(1,2,2),WEDGE(1,3,2),WEDGE(1,4,2),WEDGE(1,5,2),WEDGE(1,6,2),WEDGE(1,7,2),WEDGE(1,8,2),WEDGE(1,9,2),WEDGE(1,10,2),WEDGE(1,11,2),WEDGE(1,12,2), WEDGE(1,13,2),WEDGE(1,14,2),WEDGE(1,15,2),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

!----------------------------------------------------------------------------
		! SUPPORT OPEN AND WRITE OUTPUT FILE
		!
		*CFOPEN, '../_OUTPUT/TF2_BEARING_FORCES', force

                        *VWRITE,
BEARING FORCES [N] AND MOMENTS [Nm]
			*VWRITE,  LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  GS_SUP(1,1,2),GS_SUP(1,2,2),GS_SUP(1,3,2),GS_SUP(1,4,2),GS_SUP(1,5,2),GS_SUP(1,6,2),GS_SUP(1,7,2),GS_SUP(1,8,2),GS_SUP(1,9,2),GS_SUP(1,10,2),GS_SUP(1,11,2),GS_SUP(1,12,2),GS_SUP(1,13,2),GS_SUP(1,14,2),GS_SUP(1,15,2),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! CRYOSTAT RING OPEN AND WRITE OUTPUT FILE
		!
		*CFOPEN, '../_OUTPUT/TF2_CRYO_FORCES', force

			*VWRITE,
CRYO-RING TOROIDAL FORCES [N]
			*VWRITE,  LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  GS(1,1,2),GS(1,2,2),GS(1,3,2),GS(1,4,2),GS(1,5,2),GS(1,6,2),GS(1,7,2),GS(1,8,2),GS(1,9,2),GS(1,10,2),GS(1,11,2),GS(1,12,2),GS(1,13,2),GS(1,14,2),GS(1,15,2),
%10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE
		!----------------------------------------------------------------------------
		! UOIS
		!
		*CFOPEN, '../_OUTPUT/TF2_UOIS_FORCES', force

			*VWRITE,
UOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UOIS_2(1), UOIS(1,1,2),UOIS(1,2,2),UOIS(1,3,2),UOIS(1,4,2),UOIS(1,5,2),UOIS(1,6,2),UOIS(1,7,2),UOIS(1,8,2),UOIS(1,9,2),UOIS(1,10,2),UOIS(1,11,2),UOIS(1,12,2), UOIS(1,13,2), UOIS(1,14,2), UOIS(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
UOIS SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UOIS_2(1), UOIS(1,1,4),UOIS(1,2,4),UOIS(1,3,4),UOIS(1,4,4),UOIS(1,5,4),UOIS(1,6,4),UOIS(1,7,4),UOIS(1,8,4),UOIS(1,9,4),UOIS(1,10,4),UOIS(1,11,4),UOIS(1,12,4), UOIS(1,13,4), UOIS(1,14,4), UOIS(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! LOIS
		!
		*CFOPEN, '../_OUTPUT/TF2_LOIS_FORCES', force

			*VWRITE,
LOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LOIS_2(1), LOIS(1,1,2),LOIS(1,2,2),LOIS(1,3,2),LOIS(1,4,2),LOIS(1,5,2),LOIS(1,6,2),LOIS(1,7,2),LOIS(1,8,2),LOIS(1,9,2),LOIS(1,10,2),LOIS(1,11,2),LOIS(1,12,2), LOIS(1,13,2), LOIS(1,14,2), LOIS(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LOIS SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LOIS_2(1), LOIS(1,1,4),LOIS(1,2,4),LOIS(1,3,4),LOIS(1,4,4),LOIS(1,5,4),LOIS(1,6,4),LOIS(1,7,4),LOIS(1,8,4),LOIS(1,9,4),LOIS(1,10,4),LOIS(1,11,4),LOIS(1,12,4), LOIS(1,13,4), LOIS(1,14,4), LOIS(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! UIOIS
		!
		*CFOPEN, '../_OUTPUT/TF2_UIOIS_FORCES', force

			*VWRITE,
UIOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UIOIS_2(1), UIOIS(1,1,2),UIOIS(1,2,2),UIOIS(1,3,2),UIOIS(1,4,2),UIOIS(1,5,2),UIOIS(1,6,2),UIOIS(1,7,2),UIOIS(1,8,2),UIOIS(1,9,2),UIOIS(1,10,2),UIOIS(1,11,2),UIOIS(1,12,2), UIOIS(1,13,2), UIOIS(1,14,2), UIOIS(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,  
UIOIS TOROIDAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UIOIS_2(1), UIOIS(1,1,4),UIOIS(1,2,4),UIOIS(1,3,4),UIOIS(1,4,4),UIOIS(1,5,4),UIOIS(1,6,4),UIOIS(1,7,4),UIOIS(1,8,4),UIOIS(1,9,4),UIOIS(1,10,4),UIOIS(1,11,4),UIOIS(1,12,4), UIOIS(1,13,4), UIOIS(1,14,4), UIOIS(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,  
UIOIS VERTICAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UIOIS_2(1), UIOIS(1,1,6),UIOIS(1,2,6),UIOIS(1,3,6),UIOIS(1,4,6),UIOIS(1,5,6),UIOIS(1,6,6),UIOIS(1,7,6),UIOIS(1,8,6),UIOIS(1,9,6),UIOIS(1,10,6),UIOIS(1,11,6),UIOIS(1,12,6), UIOIS(1,13,6), UIOIS(1,14,6), UIOIS(1,15,6)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! LIOIS
		!
		*CFOPEN, '../_OUTPUT/TF2_LIOIS_FORCES', force

			*VWRITE,
LIOIS NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LIOIS_2(1), LIOIS(1,1,2),LIOIS(1,2,2),LIOIS(1,3,2),LIOIS(1,4,2),LIOIS(1,5,2),LIOIS(1,6,2),LIOIS(1,7,2),LIOIS(1,8,2),LIOIS(1,9,2),LIOIS(1,10,2),LIOIS(1,11,2),LIOIS(1,12,2), LIOIS(1,13,2), LIOIS(1,14,2), LIOIS(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LIOIS TOROIDAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LIOIS_2(1), LIOIS(1,1,4),LIOIS(1,2,4),LIOIS(1,3,4),LIOIS(1,4,4),LIOIS(1,5,4),LIOIS(1,6,4),LIOIS(1,7,4),LIOIS(1,8,4),LIOIS(1,9,4),LIOIS(1,10,4),LIOIS(1,11,4),LIOIS(1,12,4), LIOIS(1,13,4), LIOIS(1,14,4), LIOIS(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,
LIOIS VERTICAL SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LIOIS_2(1), LIOIS(1,1,6),LIOIS(1,2,6),LIOIS(1,3,6),LIOIS(1,4,6),LIOIS(1,5,6),LIOIS(1,6,6),LIOIS(1,7,6),LIOIS(1,8,6),LIOIS(1,9,6),LIOIS(1,10,6),LIOIS(1,11,6),LIOIS(1,12,6), LIOIS(1,13,6), LIOIS(1,14,6), LIOIS(1,15,6)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
		*CFCLOSE

		!----------------------------------------------------------------------------
		! GS UM80 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF2_UM80_FORCES', force
 
			*VWRITE,  
UM80 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM80_2(1), UM80(1,1,2),UM80(1,2,2),UM80(1,3,2),UM80(1,4,2),UM80(1,5,2),UM80(1,6,2),UM80(1,7,2),UM80(1,8,2),UM80(1,9,2),UM80(1,10,2),UM80(1,11,2),UM80(1,12,2), UM80(1,13,2), UM80(1,14,2), UM80(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,  
UM80 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM80_2(1), UM80(1,1,4),UM80(1,2,4),UM80(1,3,4),UM80(1,4,4),UM80(1,5,4),UM80(1,6,4),UM80(1,7,4),UM80(1,8,4),UM80(1,9,4),UM80(1,10,4),UM80(1,11,4),UM80(1,12,4), UM80(1,13,4), UM80(1,14,4), UM80(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
!		*CFCLOSE
		
		!----------------------------------------------------------------------------
		! GS UM60 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF2_UM60_FORCES', force
 
			*VWRITE,  
UM60 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM60_2(1), UM60(1,1,2),UM60(1,2,2),UM60(1,3,2),UM60(1,4,2),UM60(1,5,2),UM60(1,6,2),UM60(1,7,2),UM60(1,8,2),UM60(1,9,2),UM60(1,10,2),UM60(1,11,2),UM60(1,12,2), UM60(1,13,2), UM60(1,14,2), UM60(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,  
UM60 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_UM60_2(1), UM60(1,1,4),UM60(1,2,4),UM60(1,3,4),UM60(1,4,4),UM60(1,5,4),UM60(1,6,4),UM60(1,7,4),UM60(1,8,4),UM60(1,9,4),UM60(1,10,4),UM60(1,11,4),UM60(1,12,4), UM60(1,13,4), UM60(1,14,4), UM60(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
		*CFCLOSE
		
		!----------------------------------------------------------------------------
		! GS LM85 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF2_LM85_FORCES', force
 
			*VWRITE,
LM85 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM85_2(1), LM85(1,1,2),LM85(1,2,2),LM85(1,3,2),LM85(1,4,2),LM85(1,5,2),LM85(1,6,2),LM85(1,7,2),LM85(1,8,2),LM85(1,9,2),LM85(1,10,2),LM85(1,11,2),LM85(1,12,2), LM85(1,13,2), LM85(1,14,2), LM85(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,  
LM85 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM85_2(1), LM85(1,1,4),LM85(1,2,4),LM85(1,3,4),LM85(1,4,4),LM85(1,5,4),LM85(1,6,4),LM85(1,7,4),LM85(1,8,4),LM85(1,9,4),LM85(1,10,4),LM85(1,11,4),LM85(1,12,4), LM85(1,13,4), LM85(1,14,4), LM85(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
	
		*CFCLOSE
		
		!----------------------------------------------------------------------------
		! GS LM60 BOLTS
		!
		*CFOPEN, '../_OUTPUT/TF2_LM60_FORCES', force
 
			*VWRITE,  
LM60 NORMAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM60_2(1), LM60(1,1,2),LM60(1,2,2),LM60(1,3,2),LM60(1,4,2),LM60(1,5,2),LM60(1,6,2),LM60(1,7,2),LM60(1,8,2),LM60(1,9,2),LM60(1,10,2),LM60(1,11,2),LM60(1,12,2), LM60(1,13,2), LM60(1,14,2), LM60(1,15,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
			*VWRITE,  
LM60 SHEAR FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_LM60_2(1), LM60(1,1,4),LM60(1,2,4),LM60(1,3,4),LM60(1,4,4),LM60(1,5,4),LM60(1,6,4),LM60(1,7,4),LM60(1,8,4),LM60(1,9,4),LM60(1,10,4),LM60(1,11,4),LM60(1,12,4), LM60(1,13,4), LM60(1,14,4), LM60(1,15,4)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE

		!----------------------------------------------------------------------------
		! shear keys TOROIDAL FORCE
		!
		*CFOPEN, '../_OUTPUT/TF2_IIS_TOROIDAL', force

			*VWRITE,  
SHEAR KEYS FORCES [N]
			*VWRITE,  'NAME','LENGHT',LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%7C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  IIS_NAMES(1), IIS_FORCES(1,1,2),IIS_FORCES(1,2,2),IIS_FORCES(1,3,2),IIS_FORCES(1,4,2),IIS_FORCES(1,5,2),IIS_FORCES(1,6,2),IIS_FORCES(1,7,2),IIS_FORCES(1,8,2),IIS_FORCES(1,9,2),IIS_FORCES(1,10,2),IIS_FORCES(1,11,2),IIS_FORCES(1,12,2),IIS_FORCES(1,13,2),IIS_FORCES(1,14,2),IIS_FORCES(1,15,2),IIS_FORCES(1,16,2)
%7C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
		*CFCLOSE
		
		!----------------------------------------------------------------------------
		! shear keys SHEAR FORCE
		!
		*CFOPEN, '../_OUTPUT/TF2_IIS_SHEAR', force
 
			*VWRITE,  
SHEAR KEYS FORCES [N]
			*VWRITE,  'NAME','LENGHT',LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%7C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C  %10C %10C %10C
			*VWRITE,  IIS_NAMES(1), IIS_FORCES(1,1,4),IIS_FORCES(1,2,4),IIS_FORCES(1,3,4),IIS_FORCES(1,4,4),IIS_FORCES(1,5,4),IIS_FORCES(1,6,4),IIS_FORCES(1,7,4),IIS_FORCES(1,8,4),IIS_FORCES(1,9,4),IIS_FORCES(1,10,4),IIS_FORCES(1,11,4),IIS_FORCES(1,12,4),IIS_FORCES(1,13,4),IIS_FORCES(1,14,4),IIS_FORCES(1,15,4),IIS_FORCES(1,16,4)
%7C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E
		
		*CFCLOSE

		!----------------------------------------------------------------------------
		! PCR_RING
		!!
		*CFOPEN, '../_OUTPUT/TF2_PCR_RING', force
 
			*VWRITE,  
PCR RING TOROIDAL FORCES [N]
			*VWRITE,  'NAME', LOAD(1), LOAD(2), LOAD(3), LOAD(4), LOAD(5), LOAD(6), LOAD(7), LOAD(8), LOAD(9), LOAD(10), LOAD(11), LOAD(12), LOAD(13), LOAD(14), LOAD(15)
%7C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  C_PCR_RING(1), PCR_RING(1,1,2),PCR_RING(1,2,2),PCR_RING(1,3,2),PCR_RING(1,4,2),PCR_RING(1,5,2),PCR_RING(1,6,2),PCR_RING(1,7,2),PCR_RING(1,8,2),PCR_RING(1,9,2),PCR_RING(1,10,2),PCR_RING(1,11,2),PCR_RING(1,12,2), PCR_RING(1,13,2), PCR_RING(1,14,2), PCR_RING(1,15,2)
%7C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		!----------------------------------------------------------------------------
		! TF FORCE + MOMENT
		!!
		*CFOPEN, '../_OUTPUT/TF2_FSUM', force

			*VWRITE,
FORCES [N] AND MOMENTS [Nm] FOR TF2 WP
			*VWRITE,  'Scenario', 'FR [N]', 'FT [N]', 'FV [N]', 'MR [Nm]', 'MT [Nm]', 'MP [Nm]
%10C %10C %10C %10C %10C %10C %10C
			*VWRITE,  LOAD(1), TFLOAD(1,1,2),TFLOAD(1,2,2),TFLOAD(1,3,2),TFLOAD(1,4,2),TFLOAD(1,5,2),TFLOAD(1,6,2)
%10C %10.3E %10.3E %10.3E %10.3E %10.3E %10.3E

		*CFCLOSE
			*CFCLOSE
		*ENDIF
	*ENDDO
/EOF