[build-system]
requires = ["setuptools", "wheel", "versioneer[toml]"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["nova"]

[project]
name = "nova"
description = "Equilibrium generation and inference"
authors = [
  {name = "Simon McIntosh"},
  {email = "simon.mcintosh@iter.org"}
]
readme = "README.md"
license = {text = "ITER GIP"}
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: ITER GIP License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering :: Fusion",
]
dynamic = ["version"]
keywords = ["equilibrium", "generation", "reconstruction", "inference", "plasma", "Biot-Savart", "mesh-free"]

dependencies = [
  "appdirs",
  "click",
  "contourpy",
  "cython",
  "bokeh",
  "dask[distributed]",
  "descartes",
  "fabric",
  "gitpython",
  "netCDF4",
  "numba",
  "numpy",
  "pandas>=2.0",
  "pylops>=2.0",
  "pytest",
  "rdp",
  "scipy",
  "scikit-learn",
  "shapely>=2.0",
  "tqdm",
  "xarray",
  "xxhash",
]
 
[project.optional-dependencies]
ansys = [
  "ansys-dpf-core", 
  "ansys-dpf-post", 
  "fortranformat",
  "openpyxl",
]
cuda = [
  "cupy-cuda115",
]
dev = [ 
  "nova[docs, mesh, optimize, spyder, tests]",
]	
docs = [
  "pandoc", 
  "jupyter",
]
full = [
  "nova[ansys, docs, mesh, optimize, plan, spyder, test, thermofluids]"
]
mesh = [
  "alphashape",
  "gmsh", 
  "meshio",
  "pygmsh", 
  "pyvista",
  "tetgen", 
  "trimesh",
  "vedo>=2022.4",
]
optimize = [
  "nlopt", 
]
plan = [
  "python-dateutil",
]
spyder = [
  "seaborn",
  "spyder", 
  "spyder-unittest", 
  "spyder-line-profiler", 
  "spyder-memory-profiler", 
  "moviepy", 
  "pylsp-mypy",
  "line_profiler",
  "pandas-stubs",
]
test = [
  "asv", 
  "coverage2clover", 
  "lizard", 
  "mypy",
  "pyperf",
  "pytest", 
  "pytest-cov", 
  "pytest-xdist", 
  "snakeviz",
  "tuna",
  "virtualenv", 
]
thermofluids = [
  "ftputil", 
  "coolprop", 
  "tables", 
  "xlrd",
]

[project.scripts]
benchmark = "nova.scripts.benchmark:benchmark"
extrapolate = "nova.imas.scripts:extrapolate"
filepath = "nova.database.scripts:filepath"

[project.urls]
Homepage = "https://git.iter.org/projects/EQ/repos/nova/"

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "nova/_version.py"
versionfile_build = "nova/_version.py"
tag_prefix = ""
parentdir_prefix = "nova-"

[tool.pytest.ini_options]
addopts = "-rfEs --doctest-modules"
norecursedirs = ".git __pycache__"
testpaths = [
  "tests",
  "nova/imas", 
]
 filterwarnings = [
  "once::Warning",
  # "ignore::DeprecationWarning",
  # "ignore::FutureWarning",
  # "ignore::ImportWarning"
]

[tool.mypy]
warn_return_any = true
warn_unused_configs = false
ignore_missing_imports = true
implicit_reexport = false

[tool.pylsp-mypy]
enabled = true
live_mode = false
dmypy = true
strict = false

[tool.coverage.run]
omit = [
  "nova/ansys/*", 
  "nova/assembly/*", 
  "nova/design/*", 
  "nova/development/*", 
  "nova/dina/*", 
  "nova/obsolete/*",
  "nova/projects/*", 
  "nova/scripts/*", 
  "nova/thermalhydralic/*", 
  "nova/utilities/*"
]
